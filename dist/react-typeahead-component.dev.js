(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Typeahead = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],2:[function(require,module,exports){
(function (process){
'use strict';

var React = window.React || require('react');

module.exports = React.createClass({
    displayName: 'Aria Status',

    propTypes: process.env.NODE_ENV === 'production' ? {} : {
        message: React.PropTypes.string
    },

    componentDidMount: function() {
        var _this = this;

        // This is needed as `componentDidUpdate`
        // does not fire on the initial render.
        _this.setTextContent(_this.props.message);
    },

    componentDidUpdate: function() {
        var _this = this;

        _this.setTextContent(_this.props.message);
    },

    render: function() {
        return (
            React.createElement("span", {
                role: "status", 
                "aria-live": "polite", 
                style: {
                    left: '-9999px',
                    position: 'absolute'
                }}
            )
        );
    },

    // We cannot set `textContent` directly in `render`,
    // because React adds/deletes text nodes when rendering,
    // which confuses screen readers and doesn't cause them to read changes.
    setTextContent: function(textContent) {
        // We could set `innerHTML`, but it's better to avoid it.
        this.getDOMNode().textContent = textContent || '';
    }
});

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93YWx0ZXJtYW5nZXIvcmVwb3MvcmVhY3QtdHlwZWFoZWFkLWNvbXBvbmVudC9zcmMvY29tcG9uZW50cy9hcmlhX3N0YXR1cy5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRTdCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUNuQyxJQUFJLFdBQVcsRUFBRSxhQUFhOztJQUUxQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxHQUFHLEVBQUUsR0FBRztRQUNwRCxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNO0FBQ3ZDLEtBQUs7O0lBRUQsaUJBQWlCLEVBQUUsV0FBVztBQUNsQyxRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztBQUN6QjtBQUNBOztRQUVRLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsRCxLQUFLOztJQUVELGtCQUFrQixFQUFFLFdBQVc7QUFDbkMsUUFBUSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7O1FBRWpCLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsRCxLQUFLOztJQUVELE1BQU0sRUFBRSxXQUFXO1FBQ2Y7WUFDSSxvQkFBQSxNQUFLLEVBQUEsQ0FBQTtnQkFDRCxJQUFBLEVBQUksQ0FBQyxRQUFBLEVBQVE7Z0JBQ2IsV0FBQSxFQUFTLENBQUMsUUFBQSxFQUFRO2dCQUNsQixLQUFBLEVBQUssQ0FBRTtvQkFDSCxJQUFJLEVBQUUsU0FBUztvQkFDZixRQUFRLEVBQUUsVUFBVTtpQkFDdEIsQ0FBQTtZQUNKLENBQUE7VUFDSjtBQUNWLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxjQUFjLEVBQUUsU0FBUyxXQUFXLEVBQUU7O1FBRWxDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxXQUFXLEdBQUcsV0FBVyxJQUFJLEVBQUUsQ0FBQztLQUNyRDtDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0FyaWEgU3RhdHVzJyxcblxuICAgIHByb3BUeXBlczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHt9IDoge1xuICAgICAgICBtZXNzYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCBhcyBgY29tcG9uZW50RGlkVXBkYXRlYFxuICAgICAgICAvLyBkb2VzIG5vdCBmaXJlIG9uIHRoZSBpbml0aWFsIHJlbmRlci5cbiAgICAgICAgX3RoaXMuc2V0VGV4dENvbnRlbnQoX3RoaXMucHJvcHMubWVzc2FnZSk7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2V0VGV4dENvbnRlbnQoX3RoaXMucHJvcHMubWVzc2FnZSk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIHJvbGU9J3N0YXR1cydcbiAgICAgICAgICAgICAgICBhcmlhLWxpdmU9J3BvbGl0ZSdcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnLTk5OTlweCcsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8vIFdlIGNhbm5vdCBzZXQgYHRleHRDb250ZW50YCBkaXJlY3RseSBpbiBgcmVuZGVyYCxcbiAgICAvLyBiZWNhdXNlIFJlYWN0IGFkZHMvZGVsZXRlcyB0ZXh0IG5vZGVzIHdoZW4gcmVuZGVyaW5nLFxuICAgIC8vIHdoaWNoIGNvbmZ1c2VzIHNjcmVlbiByZWFkZXJzIGFuZCBkb2Vzbid0IGNhdXNlIHRoZW0gdG8gcmVhZCBjaGFuZ2VzLlxuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuICAgICAgICAvLyBXZSBjb3VsZCBzZXQgYGlubmVySFRNTGAsIGJ1dCBpdCdzIGJldHRlciB0byBhdm9pZCBpdC5cbiAgICAgICAgdGhpcy5nZXRET01Ob2RlKCkudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudCB8fCAnJztcbiAgICB9XG59KTtcbiJdfQ==
},{"_process":1,"react":"react"}],3:[function(require,module,exports){
(function (process){
'use strict';

var React = window.React || require('react');

module.exports = React.createClass({
    displayName: 'Input',

    propTypes: process.env.NODE_ENV === 'production' ? {} : {
        value: React.PropTypes.string,
        onChange: React.PropTypes.func
    },

    getDefaultProps: function() {
        return {
            value: '',
            onChange: function() {}
        };
    },

    componentDidUpdate: function() {
        var _this = this,
            dir = _this.props.dir;

        if (dir === null || dir === undefined) {
            // When setting an attribute to null/undefined,
            // React instead sets the attribute to an empty string.

            // This is not desired because of a possible bug in Chrome.
            // If the page is RTL, and the input's `dir` attribute is set
            // to an empty string, Chrome assumes LTR, which isn't what we want.
            React.findDOMNode(_this).removeAttribute('dir');
        }
    },

    render: function() {
        var _this = this;

        return (
            React.createElement("input", React.__spread({}, 
                _this.props, 
                {onChange: _this.handleChange})
            )
        );
    },

    handleChange: function(event) {
        var props = this.props;

        // There are several React bugs in IE,
        // where the `input`'s `onChange` event is
        // fired even when the value didn't change.
        // https://github.com/facebook/react/issues/2185
        // https://github.com/facebook/react/issues/3377
        if (event.target.value !== props.value) {
            props.onChange(event);
        }
    },

    blur: function() {
        React.findDOMNode(this).blur();
    },

    isCursorAtEnd: function() {
        var _this = this,
            inputDOMNode = React.findDOMNode(_this),
            valueLength = _this.props.value.length;

        return inputDOMNode.selectionStart === valueLength &&
               inputDOMNode.selectionEnd === valueLength;
    }
});

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy93YWx0ZXJtYW5nZXIvcmVwb3MvcmVhY3QtdHlwZWFoZWFkLWNvbXBvbmVudC9zcmMvY29tcG9uZW50cy9pbnB1dC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksQ0FBQzs7QUFFYixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7O0FBRTdCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztBQUNuQyxJQUFJLFdBQVcsRUFBRSxPQUFPOztJQUVwQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssWUFBWSxHQUFHLEVBQUUsR0FBRztRQUNwRCxLQUFLLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNO1FBQzdCLFFBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUk7QUFDdEMsS0FBSzs7SUFFRCxlQUFlLEVBQUUsV0FBVztRQUN4QixPQUFPO1lBQ0gsS0FBSyxFQUFFLEVBQUU7WUFDVCxRQUFRLEVBQUUsV0FBVyxFQUFFO1NBQzFCLENBQUM7QUFDVixLQUFLOztJQUVELGtCQUFrQixFQUFFLFdBQVc7UUFDM0IsSUFBSSxLQUFLLEdBQUcsSUFBSTtBQUN4QixZQUFZLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7QUFFbEMsUUFBUSxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztZQUVZLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25EO0FBQ1QsS0FBSzs7SUFFRCxNQUFNLEVBQUUsV0FBVztBQUN2QixRQUFRLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQzs7UUFFakI7WUFDSSxvQkFBQSxPQUFNLEVBQUEsZ0JBQUEsR0FBQTtnQkFDRCxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUM7Z0JBQ2hCLENBQUEsUUFBQSxFQUFRLENBQUUsS0FBSyxDQUFDLFlBQWEsQ0FBQSxDQUFBO1lBQy9CLENBQUE7VUFDSjtBQUNWLEtBQUs7O0lBRUQsWUFBWSxFQUFFLFNBQVMsS0FBSyxFQUFFO0FBQ2xDLFFBQVEsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztRQUVRLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssRUFBRTtZQUNwQyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0FBQ1QsS0FBSzs7SUFFRCxJQUFJLEVBQUUsV0FBVztRQUNiLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDdkMsS0FBSzs7SUFFRCxhQUFhLEVBQUUsV0FBVztRQUN0QixJQUFJLEtBQUssR0FBRyxJQUFJO1lBQ1osWUFBWSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO0FBQ25ELFlBQVksV0FBVyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzs7UUFFM0MsT0FBTyxZQUFZLENBQUMsY0FBYyxLQUFLLFdBQVc7ZUFDM0MsWUFBWSxDQUFDLFlBQVksS0FBSyxXQUFXLENBQUM7S0FDcEQ7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdJbnB1dCcsXG5cbiAgICBwcm9wVHlwZXM6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyB7fSA6IHtcbiAgICAgICAgdmFsdWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xuICAgIH0sXG5cbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKCkge31cbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGRpciA9IF90aGlzLnByb3BzLmRpcjtcblxuICAgICAgICBpZiAoZGlyID09PSBudWxsIHx8IGRpciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBXaGVuIHNldHRpbmcgYW4gYXR0cmlidXRlIHRvIG51bGwvdW5kZWZpbmVkLFxuICAgICAgICAgICAgLy8gUmVhY3QgaW5zdGVhZCBzZXRzIHRoZSBhdHRyaWJ1dGUgdG8gYW4gZW1wdHkgc3RyaW5nLlxuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5vdCBkZXNpcmVkIGJlY2F1c2Ugb2YgYSBwb3NzaWJsZSBidWcgaW4gQ2hyb21lLlxuICAgICAgICAgICAgLy8gSWYgdGhlIHBhZ2UgaXMgUlRMLCBhbmQgdGhlIGlucHV0J3MgYGRpcmAgYXR0cmlidXRlIGlzIHNldFxuICAgICAgICAgICAgLy8gdG8gYW4gZW1wdHkgc3RyaW5nLCBDaHJvbWUgYXNzdW1lcyBMVFIsIHdoaWNoIGlzbid0IHdoYXQgd2Ugd2FudC5cbiAgICAgICAgICAgIFJlYWN0LmZpbmRET01Ob2RlKF90aGlzKS5yZW1vdmVBdHRyaWJ1dGUoJ2RpcicpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHsuLi5fdGhpcy5wcm9wc31cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17X3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgaGFuZGxlQ2hhbmdlOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIC8vIFRoZXJlIGFyZSBzZXZlcmFsIFJlYWN0IGJ1Z3MgaW4gSUUsXG4gICAgICAgIC8vIHdoZXJlIHRoZSBgaW5wdXRgJ3MgYG9uQ2hhbmdlYCBldmVudCBpc1xuICAgICAgICAvLyBmaXJlZCBldmVuIHdoZW4gdGhlIHZhbHVlIGRpZG4ndCBjaGFuZ2UuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMjE4NVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzMzNzdcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldC52YWx1ZSAhPT0gcHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgIHByb3BzLm9uQ2hhbmdlKGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBibHVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgUmVhY3QuZmluZERPTU5vZGUodGhpcykuYmx1cigpO1xuICAgIH0sXG5cbiAgICBpc0N1cnNvckF0RW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIGlucHV0RE9NTm9kZSA9IFJlYWN0LmZpbmRET01Ob2RlKF90aGlzKSxcbiAgICAgICAgICAgIHZhbHVlTGVuZ3RoID0gX3RoaXMucHJvcHMudmFsdWUubGVuZ3RoO1xuXG4gICAgICAgIHJldHVybiBpbnB1dERPTU5vZGUuc2VsZWN0aW9uU3RhcnQgPT09IHZhbHVlTGVuZ3RoICYmXG4gICAgICAgICAgICAgICBpbnB1dERPTU5vZGUuc2VsZWN0aW9uRW5kID09PSB2YWx1ZUxlbmd0aDtcbiAgICB9XG59KTtcbiJdfQ==
},{"_process":1,"react":"react"}],4:[function(require,module,exports){
(function (process){
'use strict';

var React = window.React || require('react'),
    Input = require('./input.jsx'),
    AriaStatus = require('./aria_status.jsx'),
    getTextDirection = require('../utils/get_text_direction'),
    noop = function() {};

module.exports = React.createClass({
    displayName: 'Typeahead',

    statics: {
        getInstanceCount: (function() {
            var count = 0;

            return function() {
                return ++count;
            };
        }())
    },

    propTypes: process.env.NODE_ENV === 'production' ? {} : {
        inputId: React.PropTypes.string,
        inputName: React.PropTypes.string,
        className: React.PropTypes.string,
        autoFocus: React.PropTypes.bool,
        hoverSelect: React.PropTypes.bool,
        inputValue: React.PropTypes.string,
        options: React.PropTypes.array,
        placeholder: React.PropTypes.string,
        onChange: React.PropTypes.func,
        onKeyDown: React.PropTypes.func,
        onKeyPress: React.PropTypes.func,
        onKeyUp: React.PropTypes.func,
        onFocus: React.PropTypes.func,
        onBlur: React.PropTypes.func,
        onSelect: React.PropTypes.func,
        onInputClick: React.PropTypes.func,
        handleHint: React.PropTypes.func,
        onComplete: React.PropTypes.func,
        onOptionClick: React.PropTypes.func,
        onOptionChange: React.PropTypes.func,
        onDropdownOpen: React.PropTypes.func,
        onDropdownClose: React.PropTypes.func,
        optionTemplate: React.PropTypes.func.isRequired,
        getMessageForOption: React.PropTypes.func,
        getMessageForIncomingOptions: React.PropTypes.func
    },

    getDefaultProps: function() {
        return {
            className: '',
            inputValue: '',
            options: [],
            hoverSelect: true,
            onFocus: noop,
            onKeyDown: noop,
            onChange: noop,
            onInputClick: noop,
            handleHint: function() {
                return '';
            },
            onOptionClick: noop,
            onOptionChange: noop,
            onComplete:  noop,
            onDropdownOpen: noop,
            onDropdownClose: noop,
            getMessageForOption: function() {
                return '';
            },
            getMessageForIncomingOptions: function(number) {
                return (
                    number + ' suggestions are available. Use up and down arrows to select.'
                );
            }
        };
     },

    getInitialState: function() {
        return {
            selectedIndex: -1,
            isHintVisible: false,
            isDropdownVisible: false
        };
    },

    componentWillMount: function() {
        var _this = this,
            uniqueId = this.constructor.getInstanceCount();

        _this.userInputValue = null;
        _this.previousInputValue = null;
        _this.activeDescendantId = 'react-typeahead-activedescendant-' + uniqueId;
        _this.optionsId = 'react-typeahead-options-' + uniqueId;
    },

    componentDidMount: function() {
        var addEvent = window.addEventListener,
            handleWindowClose = this.handleWindowClose;

        // The `focus` event does not bubble, so we must capture it instead.
        // This closes Typeahead's dropdown whenever something else gains focus.
        addEvent('focus', handleWindowClose, true);

        // If we click anywhere outside of Typeahead, close the dropdown.
        addEvent('click', handleWindowClose, false);
    },

    componentWillUnmount: function() {
        var removeEvent = window.removeEventListener,
            handleWindowClose = this.handleWindowClose;

        removeEvent('focus', handleWindowClose, true);
        removeEvent('click', handleWindowClose, false);
    },

    componentWillReceiveProps: function(nextProps) {
        var nextValue = nextProps.inputValue,
            nextOptions = nextProps.options,
            valueLength = nextValue.length,
            isHintVisible = valueLength > 0 &&
                // A visible part of the hint must be
                // available for us to complete it.
                nextProps.handleHint(nextValue, nextOptions).slice(valueLength).length > 0;

        this.setState({
            isHintVisible: isHintVisible
        });
    },

    render: function() {
        var _this = this;

        return (
            React.createElement("div", {
                style: {
                    position: 'relative'
                }, 
                className: 'react-typeahead-container ' + _this.props.className}, 
                _this.renderInput(), 
                _this.renderDropdown(), 
                _this.renderAriaMessageForOptions(), 
                _this.renderAriaMessageForIncomingOptions()
            )
        );
    },

    renderInput: function() {
        var _this = this,
            state = _this.state,
            props = _this.props,
            inputValue = props.inputValue,
            className = 'react-typeahead-input',
            inputDirection = getTextDirection(inputValue);

        return (
            React.createElement("div", {
                style: {
                    position: 'relative'
                }, 
                className: "react-typeahead-input-container"}, 
                React.createElement(Input, {
                    disabled: true, 
                    role: "presentation", 
                    "aria-hidden": true, 
                    dir: inputDirection, 
                    className: className + ' react-typeahead-hint', 
                    style: {
                        color: 'silver',
                        WebkitTextFillColor: 'silver',
                        position: 'absolute'
                    }, 
                    value: state.isHintVisible ? props.handleHint(inputValue, props.options) : null}
                ), 
                React.createElement(Input, {
                    ref: "input", 
                    role: "combobox", 
                    "aria-owns": _this.optionsId, 
                    "aria-expanded": state.isDropdownVisible, 
                    "aria-autocomplete": "both", 
                    "aria-activedescendant": _this.activeDescendantId, 
                    value: inputValue, 
                    spellCheck: false, 
                    autoComplete: "off", 
                    autoCorrect: "off", 
                    dir: inputDirection, 
                    onClick: _this.handleClick, 
                    onFocus: _this.handleFocus, 
                    onBlur: props.onBlur, 
                    onChange: _this.handleChange, 
                    onKeyDown: _this.handleKeyDown, 
                    id: props.inputId, 
                    name: props.inputName, 
                    autoFocus: props.autoFocus, 
                    placeholder: props.placeholder, 
                    onSelect: props.onSelect, 
                    onKeyUp: props.onKeyUp, 
                    onKeyPress: props.onKeyPress, 
                    className: className + ' react-typeahead-usertext', 
                    style: {
                        position: 'relative',
                        background: 'transparent'
                    }}
                )
            )
        );
    },

    renderDropdown: function() {
        var _this = this,
            state = _this.state,
            props = _this.props,
            OptionTemplate = props.optionTemplate,
            selectedIndex = state.selectedIndex,
            isDropdownVisible = state.isDropdownVisible,
            activeDescendantId = _this.activeDescendantId;

        if (this.props.options.length < 1) {
            return null;
        }

        return (
            React.createElement("ul", {id: _this.optionsId, 
                ref: "dropdown", 
                role: "listbox", 
                "aria-hidden": !isDropdownVisible, 
                style: {
                    width: '100%',
                    background: '#fff',
                    position: 'absolute',
                    boxSizing: 'border-box',
                    display: isDropdownVisible ? 'block' : 'none'
                }, 
                className: "react-typeahead-options", 
                onMouseOut: this.handleMouseOut}, 
                
                    props.options.map(function(data, index) {
                        var isSelected = selectedIndex === index;

                        return (
                            React.createElement("li", {id: isSelected ? activeDescendantId : null, 
                                "aria-selected": isSelected, 
                                role: "option", 
                                key: index, 
                                onClick: _this.handleOptionClick.bind(_this, index), 
                                onMouseOver: _this.handleOptionMouseOver.bind(_this, index)}, 

                                React.createElement(OptionTemplate, {
                                    data: data, 
                                    index: index, 
                                    userInputValue: _this.userInputValue, 
                                    inputValue: props.inputValue, 
                                    isSelected: isSelected}
                                )
                            )
                        );
                    })
                
            )
        );
    },

    renderAriaMessageForOptions: function() {
        var _this = this,
            props = _this.props,
            inputValue = props.inputValue,
            option = props.options[_this.state.selectedIndex] || inputValue;

        return (
            React.createElement(AriaStatus, {
                message: props.getMessageForOption(option) || inputValue}
            )
        );
    },

    renderAriaMessageForIncomingOptions: function() {
        var props = this.props;

        return (
            React.createElement(AriaStatus, {
                message: props.getMessageForIncomingOptions(props.options.length)}
            )
        );
    },

    showDropdown: function() {
        var _this = this;

        if (!_this.state.isDropdownVisible) {
            _this.setState({
                isDropdownVisible: true
            }, function() {
                _this.props.onDropdownOpen();
            });
        }
    },

    hideDropdown: function() {
        var _this = this;

        if (_this.state.isDropdownVisible) {
            _this.setState({
                isDropdownVisible: false
            }, function() {
                _this.props.onDropdownClose();
            });
        }
    },

    showHint: function() {
        var _this = this,
            props = _this.props,
            inputValue = props.inputValue,
            inputValueLength = inputValue.length,
            isHintVisible = inputValueLength > 0 &&
                // A visible part of the hint must be
                // available for us to complete it.
                props.handleHint(inputValue, props.options).slice(inputValueLength).length > 0;

        _this.setState({
            isHintVisible: isHintVisible
        });
    },

    hideHint: function() {
        this.setState({
            isHintVisible: false
        });
    },

    setSelectedIndex: function(index, callback) {
        this.setState({
            selectedIndex: index
        }, callback);
    },

    handleChange: function(event) {
        var _this = this;

        _this.showHint();
        _this.showDropdown();
        _this.setSelectedIndex(-1);
        _this.props.onChange(event);
        _this.userInputValue = event.target.value;
    },

    focus: function() {
        this.refs.input.getDOMNode().focus();
    },

    handleFocus: function(event) {
        var _this = this;

        _this.showDropdown();
        _this.props.onFocus(event);
    },

    handleClick: function(event) {
        var _this = this;

        _this.showHint();
        _this.props.onInputClick(event);
    },

    navigate: function(direction, callback) {
        var _this = this,
            minIndex = -1,
            maxIndex = _this.props.options.length - 1,
            index = _this.state.selectedIndex + direction;

        if (index > maxIndex) {
            index = minIndex;
        } else if (index < minIndex) {
            index = maxIndex;
        }

        _this.setSelectedIndex(index, callback);
    },

    handleKeyDown: function(event) {
        var _this = this,
            key = event.key,
            props = _this.props,
            input = _this.refs.input,
            isDropdownVisible = _this.state.isDropdownVisible,
            isHintVisible = _this.state.isHintVisible,
            hasHandledKeyDown = false,
            index,
            optionData,
            dir;

        switch (key) {
        case 'End':
        case 'Tab':
            if (isHintVisible && !event.shiftKey) {
                event.preventDefault();
                props.onComplete(event, props.handleHint(props.inputValue, props.options));
            }
            break;
        case 'ArrowLeft':
        case 'ArrowRight':
            if (isHintVisible && !event.shiftKey && input.isCursorAtEnd()) {
                dir = getTextDirection(props.inputValue);

                if ((dir === 'ltr' && key === 'ArrowRight') || (dir === 'rtl' && key === 'ArrowLeft')) {
                    props.onComplete(event, props.handleHint(props.inputValue, props.options));
                }
            }
            break;
        case 'Enter':
            _this.focus();
            _this.hideHint();
            _this.hideDropdown();
            break;
        case 'Escape':
            _this.hideHint();
            _this.hideDropdown();
            break;
        case 'ArrowUp':
        case 'ArrowDown':
            if (props.options.length > 0) {
                event.preventDefault();

                _this.showHint();
                _this.showDropdown();

                if (isDropdownVisible) {
                    dir = key === 'ArrowUp' ? -1: 1;
                    hasHandledKeyDown = true;

                    _this.navigate(dir, function() {
                        var selectedIndex = _this.state.selectedIndex,
                            previousInputValue = _this.previousInputValue,
                            optionData = previousInputValue,
                            optionOffsetTop = 0,
                            selectedOption,
                            dropdown;

                        // We're currently on an option.
                        if (selectedIndex >= 0) {
                            // Save the current `input` value,
                            // as we might arrow back to it later.
                            if (previousInputValue === null) {
                                _this.previousInputValue = props.inputValue;
                            }

                            optionData = props.options[selectedIndex];
                            // Make selected option always scroll to visible
                            dropdown = React.findDOMNode(_this.refs.dropdown);
                            selectedOption = dropdown.children[selectedIndex];
                            optionOffsetTop = selectedOption.offsetTop;
                            if(optionOffsetTop + selectedOption.clientHeight > dropdown.clientHeight ||
                                optionOffsetTop < dropdown.scrollTop) {
                                dropdown.scrollTop = optionOffsetTop;
                            }
                        }

                        props.onOptionChange(event, optionData, selectedIndex);
                        props.onKeyDown(event, optionData, selectedIndex);
                    });
                }
            }

            break;
        }

        if (!hasHandledKeyDown) {
            index = this.state.selectedIndex;
            optionData = index < 0 ? props.inputValue : props.options[index];
            props.onKeyDown(event, optionData, index);
        }
    },

    handleOptionClick: function(selectedIndex, event) {
        var _this = this,
            props = _this.props;

        _this.focus();
        _this.hideHint();
        _this.hideDropdown();
        _this.setSelectedIndex(selectedIndex);
        props.onOptionClick(event, props.options[selectedIndex], selectedIndex);
    },

    handleOptionMouseOver: function(selectedIndex) {
        var _this = this;

        if (_this.props.hoverSelect) {
            _this.setSelectedIndex(selectedIndex);
        }
    },

    handleMouseOut: function() {
        var _this = this;

        if (_this.props.hoverSelect) {
            _this.setSelectedIndex(-1);
        }
    },

    handleWindowClose: function(event) {
        var _this = this,
            target = event.target;

        if (target !== window && !this.getDOMNode().contains(target)) {
            _this.hideHint();
            _this.hideDropdown();
        }
    }
});

}).call(this,require('_process'))
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
},{"../utils/get_text_direction":6,"./aria_status.jsx":2,"./input.jsx":3,"_process":1,"react":"react"}],5:[function(require,module,exports){
module.exports = require('./components/typeahead.jsx');


},{"./components/typeahead.jsx":4}],6:[function(require,module,exports){
'use strict';

var RTLCharactersRegExp = require('./rtl_chars_regexp'),
    NeutralCharactersRegExp = require('./neutral_chars_regexp'),
    startsWithRTL = new RegExp('^(?:' + NeutralCharactersRegExp + ')*(?:' + RTLCharactersRegExp + ')'),
    neutralText = new RegExp('^(?:' + NeutralCharactersRegExp + ')*$');

module.exports = function(text) {
    var dir = 'ltr';

    if (startsWithRTL.test(text)) {
        dir = 'rtl';
    } else if (neutralText.test(text)) {
        dir = null;
    }

    return dir;
};


},{"./neutral_chars_regexp":7,"./rtl_chars_regexp":8}],7:[function(require,module,exports){
// DO NOT EDIT!
// THIS FILE IS GENERATED!

// All bidi characters except those found in classes 'L' (LTR), 'R' (RTL), and 'AL' (RTL Arabic) as per Unicode 7.0.0.

// jshint ignore:start
// jscs:disable maximumLineLength
module.exports = '[\0-@\[-`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0600-\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u066C\u0670\u06D6-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u1680\u169B\u169C\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180E\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2000-\u200D\u2010-\u2029\u202F-\u2064\u2068\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BD\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189\u2190-\u2335\u237B-\u2394\u2396-\u23FA\u2400-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD1\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E42\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3000-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82B\uA838\uA839\uA874-\uA877\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFB29\uFD3E\uFD3F\uFDFD\uFE00-\uFE19\uFE20-\uFE2D\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD]|\uD800[\uDD01\uDD40-\uDD8C\uDD90-\uDD9B\uDDA0\uDDFD\uDEE0-\uDEFB\uDF76-\uDF7A]|\uD802[\uDD1F\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6\uDF39-\uDF3F]|\uD803[\uDE60-\uDE7E]|[\uD804\uDB40][\uDC01\uDC38-\uDC46\uDC52-\uDC65\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDEDF\uDEE3-\uDEEA\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E\uDCA0-\uDCA3]|\uD834[\uDD67-\uDD69\uDD73-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE00-\uDE45\uDF00-\uDF56]|\uD835[\uDEDB\uDF15\uDF4F\uDF89\uDFC3\uDFCE-\uDFFF]|\uD83A[\uDCD0-\uDCD6]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD6A\uDD6B\uDF00-\uDF2C\uDF30-\uDF7D\uDF80-\uDFCE\uDFD4-\uDFF7]|\uD83D[\uDC00-\uDCFE\uDD00-\uDD4A\uDD50-\uDD79\uDD7B-\uDDA3\uDDA5-\uDE42\uDE45-\uDECF\uDEE0-\uDEEC\uDEF0-\uDEF3\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD]';
// jscs:enable maximumLineLength
// jshint ignore:end


},{}],8:[function(require,module,exports){
// DO NOT EDIT!
// THIS FILE IS GENERATED!

// All bidi characters found in classes 'R', 'AL', 'RLE', 'RLO', and 'RLI' as per Unicode 7.0.0.

// jshint ignore:start
// jscs:disable maximumLineLength
module.exports = '[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05F0-\u05F4\u0608\u060B\u060D\u061B\u061C\u061E-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u08A0-\u08B2\u200F\u202B\u202E\u2067\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC57-\uDC9E\uDCA7-\uDCAF\uDD00-\uDD1B\uDD20-\uDD39\uDD3F\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE40-\uDE47\uDE50-\uDE58\uDE60-\uDE9F\uDEC0-\uDEE4\uDEEB-\uDEF6\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]';
// jscs:enable maximumLineLength
// jshint ignore:end


},{}]},{},[5])(5)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwic3JjL2NvbXBvbmVudHMvYXJpYV9zdGF0dXMuanN4Iiwic3JjL2NvbXBvbmVudHMvaW5wdXQuanN4Iiwic3JjL2NvbXBvbmVudHMvdHlwZWFoZWFkLmpzeCIsIi9Vc2Vycy93YWx0ZXJtYW5nZXIvcmVwb3MvcmVhY3QtdHlwZWFoZWFkLWNvbXBvbmVudC9zcmMvaW5kZXguanMiLCIvVXNlcnMvd2FsdGVybWFuZ2VyL3JlcG9zL3JlYWN0LXR5cGVhaGVhZC1jb21wb25lbnQvc3JjL3V0aWxzL2dldF90ZXh0X2RpcmVjdGlvbi5qcyIsIi9Vc2Vycy93YWx0ZXJtYW5nZXIvcmVwb3MvcmVhY3QtdHlwZWFoZWFkLWNvbXBvbmVudC9zcmMvdXRpbHMvbmV1dHJhbF9jaGFyc19yZWdleHAuanMiLCIvVXNlcnMvd2FsdGVybWFuZ2VyL3JlcG9zL3JlYWN0LXR5cGVhaGVhZC1jb21wb25lbnQvc3JjL3V0aWxzL3J0bF9jaGFyc19yZWdleHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pnQkEsTUFBTSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQzs7OztBQ0F2RCxZQUFZLENBQUM7O0FBRWIsSUFBSSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUM7SUFDbkQsdUJBQXVCLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQzNELGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsdUJBQXVCLEdBQUcsT0FBTyxHQUFHLG1CQUFtQixHQUFHLEdBQUcsQ0FBQztBQUN0RyxJQUFJLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsdUJBQXVCLEdBQUcsS0FBSyxDQUFDLENBQUM7O0FBRXZFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxJQUFJLEVBQUU7QUFDaEMsSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUM7O0lBRWhCLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMxQixHQUFHLEdBQUcsS0FBSyxDQUFDO0tBQ2YsTUFBTSxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDL0IsR0FBRyxHQUFHLElBQUksQ0FBQztBQUNuQixLQUFLOztJQUVELE9BQU8sR0FBRyxDQUFDO0NBQ2QsQ0FBQzs7OztBQ2pCRixlQUFlO0FBQ2YsMEJBQTBCOztBQUUxQixzSEFBc0g7O0FBRXRILHNCQUFzQjtBQUN0QixpQ0FBaUM7QUFDakMsTUFBTSxDQUFDLE9BQU8sR0FBRyw2OElBQTY4SSxDQUFDO0FBQy85SSxnQ0FBZ0M7QUFDaEMsb0JBQW9COzs7O0FDVHBCLGVBQWU7QUFDZiwwQkFBMEI7O0FBRTFCLGdHQUFnRzs7QUFFaEcsc0JBQXNCO0FBQ3RCLGlDQUFpQztBQUNqQyxNQUFNLENBQUMsT0FBTyxHQUFHLHdzQ0FBd3NDLENBQUM7QUFDMXRDLGdDQUFnQztBQUNoQyxvQkFBb0IiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuICAgIHZhciBjdXJyZW50UXVldWU7XG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW4pIHtcbiAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtpXSgpO1xuICAgICAgICB9XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbn1cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgcXVldWUucHVzaChmdW4pO1xuICAgIGlmICghZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxuLy8gVE9ETyhzaHR5bG1hbilcbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHdpbmRvdy5SZWFjdCB8fCByZXF1aXJlKCdyZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0FyaWEgU3RhdHVzJyxcblxuICAgIHByb3BUeXBlczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHt9IDoge1xuICAgICAgICBtZXNzYWdlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nXG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCBhcyBgY29tcG9uZW50RGlkVXBkYXRlYFxuICAgICAgICAvLyBkb2VzIG5vdCBmaXJlIG9uIHRoZSBpbml0aWFsIHJlbmRlci5cbiAgICAgICAgX3RoaXMuc2V0VGV4dENvbnRlbnQoX3RoaXMucHJvcHMubWVzc2FnZSk7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2V0VGV4dENvbnRlbnQoX3RoaXMucHJvcHMubWVzc2FnZSk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgICAgcm9sZTogXCJzdGF0dXNcIiwgXG4gICAgICAgICAgICAgICAgXCJhcmlhLWxpdmVcIjogXCJwb2xpdGVcIiwgXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJy05OTk5cHgnLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIC8vIFdlIGNhbm5vdCBzZXQgYHRleHRDb250ZW50YCBkaXJlY3RseSBpbiBgcmVuZGVyYCxcbiAgICAvLyBiZWNhdXNlIFJlYWN0IGFkZHMvZGVsZXRlcyB0ZXh0IG5vZGVzIHdoZW4gcmVuZGVyaW5nLFxuICAgIC8vIHdoaWNoIGNvbmZ1c2VzIHNjcmVlbiByZWFkZXJzIGFuZCBkb2Vzbid0IGNhdXNlIHRoZW0gdG8gcmVhZCBjaGFuZ2VzLlxuICAgIHNldFRleHRDb250ZW50OiBmdW5jdGlvbih0ZXh0Q29udGVudCkge1xuICAgICAgICAvLyBXZSBjb3VsZCBzZXQgYGlubmVySFRNTGAsIGJ1dCBpdCdzIGJldHRlciB0byBhdm9pZCBpdC5cbiAgICAgICAgdGhpcy5nZXRET01Ob2RlKCkudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudCB8fCAnJztcbiAgICB9XG59KTtcblxufSkuY2FsbCh0aGlzLHJlcXVpcmUoJ19wcm9jZXNzJykpXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldDp1dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTlWYzJWeWN5OTNZV3gwWlhKdFlXNW5aWEl2Y21Wd2IzTXZjbVZoWTNRdGRIbHdaV0ZvWldGa0xXTnZiWEJ2Ym1WdWRDOXpjbU12WTI5dGNHOXVaVzUwY3k5aGNtbGhYM04wWVhSMWN5NXFjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxGbEJRVmtzUTBGQlF6czdRVUZGWWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUlRkQ0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVOdVF5eEpRVUZKTEZkQlFWY3NSVUZCUlN4aFFVRmhPenRKUVVVeFFpeFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFdEJRVXNzV1VGQldTeEhRVUZITEVWQlFVVXNSMEZCUnp0UlFVTndSQ3hQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5PMEZCUTNaRExFdEJRVXM3TzBsQlJVUXNhVUpCUVdsQ0xFVkJRVVVzVjBGQlZ6dEJRVU5zUXl4UlFVRlJMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dEJRVU42UWp0QlFVTkJPenRSUVVWUkxFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEJRVU5zUkN4TFFVRkxPenRKUVVWRUxHdENRVUZyUWl4RlFVRkZMRmRCUVZjN1FVRkRia01zVVVGQlVTeEpRVUZKTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNN08xRkJSV3BDTEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTnNSQ3hMUVVGTE96dEpRVVZFTEUxQlFVMHNSVUZCUlN4WFFVRlhPMUZCUTJZN1dVRkRTU3h2UWtGQlFTeE5RVUZMTEVWQlFVRXNRMEZCUVR0blFrRkRSQ3hKUVVGQkxFVkJRVWtzUTBGQlF5eFJRVUZCTEVWQlFWRTdaMEpCUTJJc1YwRkJRU3hGUVVGVExFTkJRVU1zVVVGQlFTeEZRVUZSTzJkQ1FVTnNRaXhMUVVGQkxFVkJRVXNzUTBGQlJUdHZRa0ZEU0N4SlFVRkpMRVZCUVVVc1UwRkJVenR2UWtGRFppeFJRVUZSTEVWQlFVVXNWVUZCVlR0cFFrRkRkRUlzUTBGQlFUdFpRVU5LTEVOQlFVRTdWVUZEU2p0QlFVTldMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNTVUZCU1N4alFVRmpMRVZCUVVVc1UwRkJVeXhYUVVGWExFVkJRVVU3TzFGQlJXeERMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4SlFVRkpMRVZCUVVVc1EwRkJRenRMUVVOeVJEdERRVU5LTEVOQlFVTXNRMEZCUXlJc0ltWnBiR1VpT2lKblpXNWxjbUYwWldRdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lKM1Z6WlNCemRISnBZM1FuTzF4dVhHNTJZWElnVW1WaFkzUWdQU0J5WlhGMWFYSmxLQ2R5WldGamRDY3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUZKbFlXTjBMbU55WldGMFpVTnNZWE56S0h0Y2JpQWdJQ0JrYVhOd2JHRjVUbUZ0WlRvZ0owRnlhV0VnVTNSaGRIVnpKeXhjYmx4dUlDQWdJSEJ5YjNCVWVYQmxjem9nY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJQ2R3Y205a2RXTjBhVzl1SnlBL0lIdDlJRG9nZTF4dUlDQWdJQ0FnSUNCdFpYTnpZV2RsT2lCU1pXRmpkQzVRY205d1ZIbHdaWE11YzNSeWFXNW5YRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTnZiWEJ2Ym1WdWRFUnBaRTF2ZFc1ME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnSUNBdkx5QlVhR2x6SUdseklHNWxaV1JsWkNCaGN5QmdZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxZRnh1SUNBZ0lDQWdJQ0F2THlCa2IyVnpJRzV2ZENCbWFYSmxJRzl1SUhSb1pTQnBibWwwYVdGc0lISmxibVJsY2k1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11YzJWMFZHVjRkRU52Ym5SbGJuUW9YM1JvYVhNdWNISnZjSE11YldWemMyRm5aU2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR052YlhCdmJtVnVkRVJwWkZWd1pHRjBaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBZ0lDQWdYM1JvYVhNdWMyVjBWR1Y0ZEVOdmJuUmxiblFvWDNSb2FYTXVjSEp2Y0hNdWJXVnpjMkZuWlNrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4YzNCaGJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiR1U5SjNOMFlYUjFjeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoY21saExXeHBkbVU5SjNCdmJHbDBaU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pUMTdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXWjBPaUFuTFRrNU9UbHdlQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQW5ZV0p6YjJ4MWRHVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzh2SUZkbElHTmhibTV2ZENCelpYUWdZSFJsZUhSRGIyNTBaVzUwWUNCa2FYSmxZM1JzZVNCcGJpQmdjbVZ1WkdWeVlDeGNiaUFnSUNBdkx5QmlaV05oZFhObElGSmxZV04wSUdGa1pITXZaR1ZzWlhSbGN5QjBaWGgwSUc1dlpHVnpJSGRvWlc0Z2NtVnVaR1Z5YVc1bkxGeHVJQ0FnSUM4dklIZG9hV05vSUdOdmJtWjFjMlZ6SUhOamNtVmxiaUJ5WldGa1pYSnpJR0Z1WkNCa2IyVnpiaWQwSUdOaGRYTmxJSFJvWlcwZ2RHOGdjbVZoWkNCamFHRnVaMlZ6TGx4dUlDQWdJSE5sZEZSbGVIUkRiMjUwWlc1ME9pQm1kVzVqZEdsdmJpaDBaWGgwUTI5dWRHVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlhaU0JqYjNWc1pDQnpaWFFnWUdsdWJtVnlTRlJOVEdBc0lHSjFkQ0JwZENkeklHSmxkSFJsY2lCMGJ5QmhkbTlwWkNCcGRDNWNiaUFnSUNBZ0lDQWdkR2hwY3k1blpYUkVUMDFPYjJSbEtDa3VkR1Y0ZEVOdmJuUmxiblFnUFNCMFpYaDBRMjl1ZEdWdWRDQjhmQ0FuSnp0Y2JpQWdJQ0I5WEc1OUtUdGNiaUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHdpbmRvdy5SZWFjdCB8fCByZXF1aXJlKCdyZWFjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ0lucHV0JyxcblxuICAgIHByb3BUeXBlczogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IHt9IDoge1xuICAgICAgICB2YWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICBvbkNoYW5nZTogZnVuY3Rpb24oKSB7fVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgZGlyID0gX3RoaXMucHJvcHMuZGlyO1xuXG4gICAgICAgIGlmIChkaXIgPT09IG51bGwgfHwgZGlyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gc2V0dGluZyBhbiBhdHRyaWJ1dGUgdG8gbnVsbC91bmRlZmluZWQsXG4gICAgICAgICAgICAvLyBSZWFjdCBpbnN0ZWFkIHNldHMgdGhlIGF0dHJpYnV0ZSB0byBhbiBlbXB0eSBzdHJpbmcuXG5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IGRlc2lyZWQgYmVjYXVzZSBvZiBhIHBvc3NpYmxlIGJ1ZyBpbiBDaHJvbWUuXG4gICAgICAgICAgICAvLyBJZiB0aGUgcGFnZSBpcyBSVEwsIGFuZCB0aGUgaW5wdXQncyBgZGlyYCBhdHRyaWJ1dGUgaXMgc2V0XG4gICAgICAgICAgICAvLyB0byBhbiBlbXB0eSBzdHJpbmcsIENocm9tZSBhc3N1bWVzIExUUiwgd2hpY2ggaXNuJ3Qgd2hhdCB3ZSB3YW50LlxuICAgICAgICAgICAgUmVhY3QuZmluZERPTU5vZGUoX3RoaXMpLnJlbW92ZUF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIFJlYWN0Ll9fc3ByZWFkKHt9LCBcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcywgXG4gICAgICAgICAgICAgICAge29uQ2hhbmdlOiBfdGhpcy5oYW5kbGVDaGFuZ2V9KVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgLy8gVGhlcmUgYXJlIHNldmVyYWwgUmVhY3QgYnVncyBpbiBJRSxcbiAgICAgICAgLy8gd2hlcmUgdGhlIGBpbnB1dGAncyBgb25DaGFuZ2VgIGV2ZW50IGlzXG4gICAgICAgIC8vIGZpcmVkIGV2ZW4gd2hlbiB0aGUgdmFsdWUgZGlkbid0IGNoYW5nZS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yMTg1XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzM3N1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LnZhbHVlICE9PSBwcm9wcy52YWx1ZSkge1xuICAgICAgICAgICAgcHJvcHMub25DaGFuZ2UoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGJsdXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICBSZWFjdC5maW5kRE9NTm9kZSh0aGlzKS5ibHVyKCk7XG4gICAgfSxcblxuICAgIGlzQ3Vyc29yQXRFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgaW5wdXRET01Ob2RlID0gUmVhY3QuZmluZERPTU5vZGUoX3RoaXMpLFxuICAgICAgICAgICAgdmFsdWVMZW5ndGggPSBfdGhpcy5wcm9wcy52YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgcmV0dXJuIGlucHV0RE9NTm9kZS5zZWxlY3Rpb25TdGFydCA9PT0gdmFsdWVMZW5ndGggJiZcbiAgICAgICAgICAgICAgIGlucHV0RE9NTm9kZS5zZWxlY3Rpb25FbmQgPT09IHZhbHVlTGVuZ3RoO1xuICAgIH1cbn0pO1xuXG59KS5jYWxsKHRoaXMscmVxdWlyZSgnX3Byb2Nlc3MnKSlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpOVZjMlZ5Y3k5M1lXeDBaWEp0WVc1blpYSXZjbVZ3YjNNdmNtVmhZM1F0ZEhsd1pXRm9aV0ZrTFdOdmJYQnZibVZ1ZEM5emNtTXZZMjl0Y0c5dVpXNTBjeTlwYm5CMWRDNXFjM2dpWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanRCUVVGQkxGbEJRVmtzUTBGQlF6czdRVUZGWWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUlRkQ0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVkQlFVY3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVOdVF5eEpRVUZKTEZkQlFWY3NSVUZCUlN4UFFVRlBPenRKUVVWd1FpeFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFdEJRVXNzV1VGQldTeEhRVUZITEVWQlFVVXNSMEZCUnp0UlFVTndSQ3hMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5PMUZCUXpkQ0xGRkJRVkVzUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrN1FVRkRkRU1zUzBGQlN6czdTVUZGUkN4bFFVRmxMRVZCUVVVc1YwRkJWenRSUVVONFFpeFBRVUZQTzFsQlEwZ3NTMEZCU3l4RlFVRkZMRVZCUVVVN1dVRkRWQ3hSUVVGUkxFVkJRVVVzVjBGQlZ5eEZRVUZGTzFOQlF6RkNMRU5CUVVNN1FVRkRWaXhMUVVGTE96dEpRVVZFTEd0Q1FVRnJRaXhGUVVGRkxGZEJRVmM3VVVGRE0wSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTVHRCUVVONFFpeFpRVUZaTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF6czdRVUZGYkVNc1VVRkJVU3hKUVVGSkxFZEJRVWNzUzBGQlN5eEpRVUZKTEVsQlFVa3NSMEZCUnl4TFFVRkxMRk5CUVZNc1JVRkJSVHRCUVVNdlF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRaUVVWWkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1pVRkJaU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFOQlEyNUVPMEZCUTFRc1MwRkJTenM3U1VGRlJDeE5RVUZOTEVWQlFVVXNWMEZCVnp0QlFVTjJRaXhSUVVGUkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1VVRkZha0k3V1VGRFNTeHZRa0ZCUVN4UFFVRk5MRVZCUVVFc1owSkJRVUVzUjBGQlFUdG5Ra0ZEUkN4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVU03WjBKQlEyaENMRU5CUVVFc1VVRkJRU3hGUVVGUkxFTkJRVVVzUzBGQlN5eERRVUZETEZsQlFXRXNRMEZCUVN4RFFVRkJPMWxCUXk5Q0xFTkJRVUU3VlVGRFNqdEJRVU5XTEV0QlFVczdPMGxCUlVRc1dVRkJXU3hGUVVGRkxGTkJRVk1zUzBGQlN5eEZRVUZGTzBGQlEyeERMRkZCUVZFc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXp0QlFVTXZRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0UlFVVlJMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEV0QlFVc3NTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVOd1F5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRM3BDTzBGQlExUXNTMEZCU3pzN1NVRkZSQ3hKUVVGSkxFVkJRVVVzVjBGQlZ6dFJRVU5pTEV0QlFVc3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZEZGtNc1MwRkJTenM3U1VGRlJDeGhRVUZoTEVWQlFVVXNWMEZCVnp0UlFVTjBRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTzFsQlExb3NXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETzBGQlEyNUVMRmxCUVZrc1YwRkJWeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenM3VVVGRk0wTXNUMEZCVHl4WlFVRlpMRU5CUVVNc1kwRkJZeXhMUVVGTExGZEJRVmM3WlVGRE0wTXNXVUZCV1N4RFFVRkRMRmxCUVZrc1MwRkJTeXhYUVVGWExFTkJRVU03UzBGRGNFUTdRMEZEU2l4RFFVRkRMRU5CUVVNaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVkbUZ5SUZKbFlXTjBJRDBnY21WeGRXbHlaU2duY21WaFkzUW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCU1pXRmpkQzVqY21WaGRHVkRiR0Z6Y3loN1hHNGdJQ0FnWkdsemNHeGhlVTVoYldVNklDZEpibkIxZENjc1hHNWNiaUFnSUNCd2NtOXdWSGx3WlhNNklIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDA5UFNBbmNISnZaSFZqZEdsdmJpY2dQeUI3ZlNBNklIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1emRISnBibWNzWEc0Z0lDQWdJQ0FnSUc5dVEyaGhibWRsT2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVkxeHVJQ0FnSUgwc1hHNWNiaUFnSUNCblpYUkVaV1poZFd4MFVISnZjSE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJQ2NuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiMjVEYUdGdVoyVTZJR1oxYm1OMGFXOXVLQ2tnZTMxY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbE9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBjaUE5SUY5MGFHbHpMbkJ5YjNCekxtUnBjanRjYmx4dUlDQWdJQ0FnSUNCcFppQW9aR2x5SUQwOVBTQnVkV3hzSUh4OElHUnBjaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhObGRIUnBibWNnWVc0Z1lYUjBjbWxpZFhSbElIUnZJRzUxYkd3dmRXNWtaV1pwYm1Wa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1VtVmhZM1FnYVc1emRHVmhaQ0J6WlhSeklIUm9aU0JoZEhSeWFXSjFkR1VnZEc4Z1lXNGdaVzF3ZEhrZ2MzUnlhVzVuTGx4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVWFHbHpJR2x6SUc1dmRDQmtaWE5wY21Wa0lHSmxZMkYxYzJVZ2IyWWdZU0J3YjNOemFXSnNaU0JpZFdjZ2FXNGdRMmh5YjIxbExseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsSUhCaFoyVWdhWE1nVWxSTUxDQmhibVFnZEdobElHbHVjSFYwSjNNZ1lHUnBjbUFnWVhSMGNtbGlkWFJsSUdseklITmxkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkRzhnWVc0Z1pXMXdkSGtnYzNSeWFXNW5MQ0JEYUhKdmJXVWdZWE56ZFcxbGN5Qk1WRklzSUhkb2FXTm9JR2x6YmlkMElIZG9ZWFFnZDJVZ2QyRnVkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGSmxZV04wTG1acGJtUkVUMDFPYjJSbEtGOTBhR2x6S1M1eVpXMXZkbVZCZEhSeWFXSjFkR1VvSjJScGNpY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsYm1SbGNqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJRHhwYm5CMWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc3VMaTVmZEdocGN5NXdjbTl3YzMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlQxN1gzUm9hWE11YUdGdVpHeGxRMmhoYm1kbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHo1Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FHRnVaR3hsUTJoaGJtZGxPaUJtZFc1amRHbHZiaWhsZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NISnZjSE1nUFNCMGFHbHpMbkJ5YjNCek8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZSb1pYSmxJR0Z5WlNCelpYWmxjbUZzSUZKbFlXTjBJR0oxWjNNZ2FXNGdTVVVzWEc0Z0lDQWdJQ0FnSUM4dklIZG9aWEpsSUhSb1pTQmdhVzV3ZFhSZ0ozTWdZRzl1UTJoaGJtZGxZQ0JsZG1WdWRDQnBjMXh1SUNBZ0lDQWdJQ0F2THlCbWFYSmxaQ0JsZG1WdUlIZG9aVzRnZEdobElIWmhiSFZsSUdScFpHNG5kQ0JqYUdGdVoyVXVYRzRnSUNBZ0lDQWdJQzh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5bVlXTmxZbTl2YXk5eVpXRmpkQzlwYzNOMVpYTXZNakU0TlZ4dUlDQWdJQ0FnSUNBdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZabUZqWldKdmIyc3ZjbVZoWTNRdmFYTnpkV1Z6THpNek56ZGNiaUFnSUNBZ0lDQWdhV1lnS0dWMlpXNTBMblJoY21kbGRDNTJZV3gxWlNBaFBUMGdjSEp2Y0hNdWRtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCekxtOXVRMmhoYm1kbEtHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCaWJIVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1VtVmhZM1F1Wm1sdVpFUlBUVTV2WkdVb2RHaHBjeWt1WW14MWNpZ3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnBjME4xY25OdmNrRjBSVzVrT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUY5MGFHbHpJRDBnZEdocGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBSRTlOVG05a1pTQTlJRkpsWVdOMExtWnBibVJFVDAxT2IyUmxLRjkwYUdsektTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxUR1Z1WjNSb0lEMGdYM1JvYVhNdWNISnZjSE11ZG1Gc2RXVXViR1Z1WjNSb08xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBibkIxZEVSUFRVNXZaR1V1YzJWc1pXTjBhVzl1VTNSaGNuUWdQVDA5SUhaaGJIVmxUR1Z1WjNSb0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibkIxZEVSUFRVNXZaR1V1YzJWc1pXTjBhVzl1Ulc1a0lEMDlQU0IyWVd4MVpVeGxibWQwYUR0Y2JpQWdJQ0I5WEc1OUtUdGNiaUpkZlE9PSIsIihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHdpbmRvdy5SZWFjdCB8fCByZXF1aXJlKCdyZWFjdCcpLFxuICAgIElucHV0ID0gcmVxdWlyZSgnLi9pbnB1dC5qc3gnKSxcbiAgICBBcmlhU3RhdHVzID0gcmVxdWlyZSgnLi9hcmlhX3N0YXR1cy5qc3gnKSxcbiAgICBnZXRUZXh0RGlyZWN0aW9uID0gcmVxdWlyZSgnLi4vdXRpbHMvZ2V0X3RleHRfZGlyZWN0aW9uJyksXG4gICAgbm9vcCA9IGZ1bmN0aW9uKCkge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnVHlwZWFoZWFkJyxcblxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgZ2V0SW5zdGFuY2VDb3VudDogKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiArK2NvdW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSgpKVxuICAgIH0sXG5cbiAgICBwcm9wVHlwZXM6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyB7fSA6IHtcbiAgICAgICAgaW5wdXRJZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaW5wdXROYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGF1dG9Gb2N1czogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGhvdmVyU2VsZWN0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgaW5wdXRWYWx1ZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgb3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBwbGFjZWhvbGRlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgb25DaGFuZ2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbktleURvd246IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbktleVByZXNzOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25LZXlVcDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIG9uRm9jdXM6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbkJsdXI6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvblNlbGVjdDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIG9uSW5wdXRDbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIGhhbmRsZUhpbnQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbkNvbXBsZXRlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25PcHRpb25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIG9uT3B0aW9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgb25Ecm9wZG93bk9wZW46IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvbkRyb3Bkb3duQ2xvc2U6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuICAgICAgICBvcHRpb25UZW1wbGF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgICAgZ2V0TWVzc2FnZUZvck9wdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG4gICAgICAgIGdldE1lc3NhZ2VGb3JJbmNvbWluZ09wdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZTogJycsXG4gICAgICAgICAgICBvcHRpb25zOiBbXSxcbiAgICAgICAgICAgIGhvdmVyU2VsZWN0OiB0cnVlLFxuICAgICAgICAgICAgb25Gb2N1czogbm9vcCxcbiAgICAgICAgICAgIG9uS2V5RG93bjogbm9vcCxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBub29wLFxuICAgICAgICAgICAgb25JbnB1dENsaWNrOiBub29wLFxuICAgICAgICAgICAgaGFuZGxlSGludDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uT3B0aW9uQ2xpY2s6IG5vb3AsXG4gICAgICAgICAgICBvbk9wdGlvbkNoYW5nZTogbm9vcCxcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICBub29wLFxuICAgICAgICAgICAgb25Ecm9wZG93bk9wZW46IG5vb3AsXG4gICAgICAgICAgICBvbkRyb3Bkb3duQ2xvc2U6IG5vb3AsXG4gICAgICAgICAgICBnZXRNZXNzYWdlRm9yT3B0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TWVzc2FnZUZvckluY29taW5nT3B0aW9uczogZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyICsgJyBzdWdnZXN0aW9ucyBhcmUgYXZhaWxhYmxlLiBVc2UgdXAgYW5kIGRvd24gYXJyb3dzIHRvIHNlbGVjdC4nXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgfSxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZWxlY3RlZEluZGV4OiAtMSxcbiAgICAgICAgICAgIGlzSGludFZpc2libGU6IGZhbHNlLFxuICAgICAgICAgICAgaXNEcm9wZG93blZpc2libGU6IGZhbHNlXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICB1bmlxdWVJZCA9IHRoaXMuY29uc3RydWN0b3IuZ2V0SW5zdGFuY2VDb3VudCgpO1xuXG4gICAgICAgIF90aGlzLnVzZXJJbnB1dFZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMucHJldmlvdXNJbnB1dFZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuYWN0aXZlRGVzY2VuZGFudElkID0gJ3JlYWN0LXR5cGVhaGVhZC1hY3RpdmVkZXNjZW5kYW50LScgKyB1bmlxdWVJZDtcbiAgICAgICAgX3RoaXMub3B0aW9uc0lkID0gJ3JlYWN0LXR5cGVhaGVhZC1vcHRpb25zLScgKyB1bmlxdWVJZDtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYWRkRXZlbnQgPSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcixcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd0Nsb3NlID0gdGhpcy5oYW5kbGVXaW5kb3dDbG9zZTtcblxuICAgICAgICAvLyBUaGUgYGZvY3VzYCBldmVudCBkb2VzIG5vdCBidWJibGUsIHNvIHdlIG11c3QgY2FwdHVyZSBpdCBpbnN0ZWFkLlxuICAgICAgICAvLyBUaGlzIGNsb3NlcyBUeXBlYWhlYWQncyBkcm9wZG93biB3aGVuZXZlciBzb21ldGhpbmcgZWxzZSBnYWlucyBmb2N1cy5cbiAgICAgICAgYWRkRXZlbnQoJ2ZvY3VzJywgaGFuZGxlV2luZG93Q2xvc2UsIHRydWUpO1xuXG4gICAgICAgIC8vIElmIHdlIGNsaWNrIGFueXdoZXJlIG91dHNpZGUgb2YgVHlwZWFoZWFkLCBjbG9zZSB0aGUgZHJvcGRvd24uXG4gICAgICAgIGFkZEV2ZW50KCdjbGljaycsIGhhbmRsZVdpbmRvd0Nsb3NlLCBmYWxzZSk7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlbW92ZUV2ZW50ID0gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dDbG9zZSA9IHRoaXMuaGFuZGxlV2luZG93Q2xvc2U7XG5cbiAgICAgICAgcmVtb3ZlRXZlbnQoJ2ZvY3VzJywgaGFuZGxlV2luZG93Q2xvc2UsIHRydWUpO1xuICAgICAgICByZW1vdmVFdmVudCgnY2xpY2snLCBoYW5kbGVXaW5kb3dDbG9zZSwgZmFsc2UpO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIG5leHRWYWx1ZSA9IG5leHRQcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICAgICAgbmV4dE9wdGlvbnMgPSBuZXh0UHJvcHMub3B0aW9ucyxcbiAgICAgICAgICAgIHZhbHVlTGVuZ3RoID0gbmV4dFZhbHVlLmxlbmd0aCxcbiAgICAgICAgICAgIGlzSGludFZpc2libGUgPSB2YWx1ZUxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAvLyBBIHZpc2libGUgcGFydCBvZiB0aGUgaGludCBtdXN0IGJlXG4gICAgICAgICAgICAgICAgLy8gYXZhaWxhYmxlIGZvciB1cyB0byBjb21wbGV0ZSBpdC5cbiAgICAgICAgICAgICAgICBuZXh0UHJvcHMuaGFuZGxlSGludChuZXh0VmFsdWUsIG5leHRPcHRpb25zKS5zbGljZSh2YWx1ZUxlbmd0aCkubGVuZ3RoID4gMDtcblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzSGludFZpc2libGU6IGlzSGludFZpc2libGVcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAncmVhY3QtdHlwZWFoZWFkLWNvbnRhaW5lciAnICsgX3RoaXMucHJvcHMuY2xhc3NOYW1lfSwgXG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVySW5wdXQoKSwgXG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyRHJvcGRvd24oKSwgXG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyQXJpYU1lc3NhZ2VGb3JPcHRpb25zKCksIFxuICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckFyaWFNZXNzYWdlRm9ySW5jb21pbmdPcHRpb25zKClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgcmVuZGVySW5wdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9ICdyZWFjdC10eXBlYWhlYWQtaW5wdXQnLFxuICAgICAgICAgICAgaW5wdXREaXJlY3Rpb24gPSBnZXRUZXh0RGlyZWN0aW9uKGlucHV0VmFsdWUpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC10eXBlYWhlYWQtaW5wdXQtY29udGFpbmVyXCJ9LCBcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KElucHV0LCB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlLCBcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgXG4gICAgICAgICAgICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgICAgIGRpcjogaW5wdXREaXJlY3Rpb24sIFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSArICcgcmVhY3QtdHlwZWFoZWFkLWhpbnQnLCBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnc2lsdmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFdlYmtpdFRleHRGaWxsQ29sb3I6ICdzaWx2ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdGF0ZS5pc0hpbnRWaXNpYmxlID8gcHJvcHMuaGFuZGxlSGludChpbnB1dFZhbHVlLCBwcm9wcy5vcHRpb25zKSA6IG51bGx9XG4gICAgICAgICAgICAgICAgKSwgXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChJbnB1dCwge1xuICAgICAgICAgICAgICAgICAgICByZWY6IFwiaW5wdXRcIiwgXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6IFwiY29tYm9ib3hcIiwgXG4gICAgICAgICAgICAgICAgICAgIFwiYXJpYS1vd25zXCI6IF90aGlzLm9wdGlvbnNJZCwgXG4gICAgICAgICAgICAgICAgICAgIFwiYXJpYS1leHBhbmRlZFwiOiBzdGF0ZS5pc0Ryb3Bkb3duVmlzaWJsZSwgXG4gICAgICAgICAgICAgICAgICAgIFwiYXJpYS1hdXRvY29tcGxldGVcIjogXCJib3RoXCIsIFxuICAgICAgICAgICAgICAgICAgICBcImFyaWEtYWN0aXZlZGVzY2VuZGFudFwiOiBfdGhpcy5hY3RpdmVEZXNjZW5kYW50SWQsIFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaW5wdXRWYWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgIHNwZWxsQ2hlY2s6IGZhbHNlLCBcbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlOiBcIm9mZlwiLCBcbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvcnJlY3Q6IFwib2ZmXCIsIFxuICAgICAgICAgICAgICAgICAgICBkaXI6IGlucHV0RGlyZWN0aW9uLCBcbiAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlQ2xpY2ssIFxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzOiBfdGhpcy5oYW5kbGVGb2N1cywgXG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cjogcHJvcHMub25CbHVyLCBcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IF90aGlzLmhhbmRsZUNoYW5nZSwgXG4gICAgICAgICAgICAgICAgICAgIG9uS2V5RG93bjogX3RoaXMuaGFuZGxlS2V5RG93biwgXG4gICAgICAgICAgICAgICAgICAgIGlkOiBwcm9wcy5pbnB1dElkLCBcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcHJvcHMuaW5wdXROYW1lLCBcbiAgICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzOiBwcm9wcy5hdXRvRm9jdXMsIFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogcHJvcHMucGxhY2Vob2xkZXIsIFxuICAgICAgICAgICAgICAgICAgICBvblNlbGVjdDogcHJvcHMub25TZWxlY3QsIFxuICAgICAgICAgICAgICAgICAgICBvbktleVVwOiBwcm9wcy5vbktleVVwLCBcbiAgICAgICAgICAgICAgICAgICAgb25LZXlQcmVzczogcHJvcHMub25LZXlQcmVzcywgXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lICsgJyByZWFjdC10eXBlYWhlYWQtdXNlcnRleHQnLCBcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyRHJvcGRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgc3RhdGUgPSBfdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBPcHRpb25UZW1wbGF0ZSA9IHByb3BzLm9wdGlvblRlbXBsYXRlLFxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IHN0YXRlLnNlbGVjdGVkSW5kZXgsXG4gICAgICAgICAgICBpc0Ryb3Bkb3duVmlzaWJsZSA9IHN0YXRlLmlzRHJvcGRvd25WaXNpYmxlLFxuICAgICAgICAgICAgYWN0aXZlRGVzY2VuZGFudElkID0gX3RoaXMuYWN0aXZlRGVzY2VuZGFudElkO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9wdGlvbnMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInVsXCIsIHtpZDogX3RoaXMub3B0aW9uc0lkLCBcbiAgICAgICAgICAgICAgICByZWY6IFwiZHJvcGRvd25cIiwgXG4gICAgICAgICAgICAgICAgcm9sZTogXCJsaXN0Ym94XCIsIFxuICAgICAgICAgICAgICAgIFwiYXJpYS1oaWRkZW5cIjogIWlzRHJvcGRvd25WaXNpYmxlLCBcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZmZicsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaXNEcm9wZG93blZpc2libGUgPyAnYmxvY2snIDogJ25vbmUnXG4gICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcInJlYWN0LXR5cGVhaGVhZC1vcHRpb25zXCIsIFxuICAgICAgICAgICAgICAgIG9uTW91c2VPdXQ6IHRoaXMuaGFuZGxlTW91c2VPdXR9LCBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMub3B0aW9ucy5tYXAoZnVuY3Rpb24oZGF0YSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1NlbGVjdGVkID0gc2VsZWN0ZWRJbmRleCA9PT0gaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImxpXCIsIHtpZDogaXNTZWxlY3RlZCA/IGFjdGl2ZURlc2NlbmRhbnRJZCA6IG51bGwsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtc2VsZWN0ZWRcIjogaXNTZWxlY3RlZCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6IFwib3B0aW9uXCIsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGluZGV4LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogX3RoaXMuaGFuZGxlT3B0aW9uQ2xpY2suYmluZChfdGhpcywgaW5kZXgpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU92ZXI6IF90aGlzLmhhbmRsZU9wdGlvbk1vdXNlT3Zlci5iaW5kKF90aGlzLCBpbmRleCl9LCBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE9wdGlvblRlbXBsYXRlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySW5wdXRWYWx1ZTogX3RoaXMudXNlcklucHV0VmFsdWUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRWYWx1ZTogcHJvcHMuaW5wdXRWYWx1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkOiBpc1NlbGVjdGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyQXJpYU1lc3NhZ2VGb3JPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgICAgIHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICBpbnB1dFZhbHVlID0gcHJvcHMuaW5wdXRWYWx1ZSxcbiAgICAgICAgICAgIG9wdGlvbiA9IHByb3BzLm9wdGlvbnNbX3RoaXMuc3RhdGUuc2VsZWN0ZWRJbmRleF0gfHwgaW5wdXRWYWx1ZTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBcmlhU3RhdHVzLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcHJvcHMuZ2V0TWVzc2FnZUZvck9wdGlvbihvcHRpb24pIHx8IGlucHV0VmFsdWV9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHJlbmRlckFyaWFNZXNzYWdlRm9ySW5jb21pbmdPcHRpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBcmlhU3RhdHVzLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogcHJvcHMuZ2V0TWVzc2FnZUZvckluY29taW5nT3B0aW9ucyhwcm9wcy5vcHRpb25zLmxlbmd0aCl9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIHNob3dEcm9wZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5pc0Ryb3Bkb3duVmlzaWJsZSkge1xuICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGlzRHJvcGRvd25WaXNpYmxlOiB0cnVlXG4gICAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vbkRyb3Bkb3duT3BlbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGlkZURyb3Bkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoX3RoaXMuc3RhdGUuaXNEcm9wZG93blZpc2libGUpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBpc0Ryb3Bkb3duVmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLm9uRHJvcGRvd25DbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgc2hvd0hpbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGlucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlLFxuICAgICAgICAgICAgaW5wdXRWYWx1ZUxlbmd0aCA9IGlucHV0VmFsdWUubGVuZ3RoLFxuICAgICAgICAgICAgaXNIaW50VmlzaWJsZSA9IGlucHV0VmFsdWVMZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgLy8gQSB2aXNpYmxlIHBhcnQgb2YgdGhlIGhpbnQgbXVzdCBiZVxuICAgICAgICAgICAgICAgIC8vIGF2YWlsYWJsZSBmb3IgdXMgdG8gY29tcGxldGUgaXQuXG4gICAgICAgICAgICAgICAgcHJvcHMuaGFuZGxlSGludChpbnB1dFZhbHVlLCBwcm9wcy5vcHRpb25zKS5zbGljZShpbnB1dFZhbHVlTGVuZ3RoKS5sZW5ndGggPiAwO1xuXG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGlzSGludFZpc2libGU6IGlzSGludFZpc2libGVcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIGhpZGVIaW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBpc0hpbnRWaXNpYmxlOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgc2V0U2VsZWN0ZWRJbmRleDogZnVuY3Rpb24oaW5kZXgsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleDogaW5kZXhcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICBoYW5kbGVDaGFuZ2U6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2hvd0hpbnQoKTtcbiAgICAgICAgX3RoaXMuc2hvd0Ryb3Bkb3duKCk7XG4gICAgICAgIF90aGlzLnNldFNlbGVjdGVkSW5kZXgoLTEpO1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkNoYW5nZShldmVudCk7XG4gICAgICAgIF90aGlzLnVzZXJJbnB1dFZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIH0sXG5cbiAgICBmb2N1czogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVmcy5pbnB1dC5nZXRET01Ob2RlKCkuZm9jdXMoKTtcbiAgICB9LFxuXG4gICAgaGFuZGxlRm9jdXM6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX3RoaXMuc2hvd0Ryb3Bkb3duKCk7XG4gICAgICAgIF90aGlzLnByb3BzLm9uRm9jdXMoZXZlbnQpO1xuICAgIH0sXG5cbiAgICBoYW5kbGVDbGljazogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBfdGhpcy5zaG93SGludCgpO1xuICAgICAgICBfdGhpcy5wcm9wcy5vbklucHV0Q2xpY2soZXZlbnQpO1xuICAgIH0sXG5cbiAgICBuYXZpZ2F0ZTogZnVuY3Rpb24oZGlyZWN0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgbWluSW5kZXggPSAtMSxcbiAgICAgICAgICAgIG1heEluZGV4ID0gX3RoaXMucHJvcHMub3B0aW9ucy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgaW5kZXggPSBfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4ICsgZGlyZWN0aW9uO1xuXG4gICAgICAgIGlmIChpbmRleCA+IG1heEluZGV4KSB7XG4gICAgICAgICAgICBpbmRleCA9IG1pbkluZGV4O1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgbWluSW5kZXgpIHtcbiAgICAgICAgICAgIGluZGV4ID0gbWF4SW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KGluZGV4LCBjYWxsYmFjayk7XG4gICAgfSxcblxuICAgIGhhbmRsZUtleURvd246IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBrZXkgPSBldmVudC5rZXksXG4gICAgICAgICAgICBwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgICAgaW5wdXQgPSBfdGhpcy5yZWZzLmlucHV0LFxuICAgICAgICAgICAgaXNEcm9wZG93blZpc2libGUgPSBfdGhpcy5zdGF0ZS5pc0Ryb3Bkb3duVmlzaWJsZSxcbiAgICAgICAgICAgIGlzSGludFZpc2libGUgPSBfdGhpcy5zdGF0ZS5pc0hpbnRWaXNpYmxlLFxuICAgICAgICAgICAgaGFzSGFuZGxlZEtleURvd24gPSBmYWxzZSxcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgb3B0aW9uRGF0YSxcbiAgICAgICAgICAgIGRpcjtcblxuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICdFbmQnOlxuICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgICAgaWYgKGlzSGludFZpc2libGUgJiYgIWV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkNvbXBsZXRlKGV2ZW50LCBwcm9wcy5oYW5kbGVIaW50KHByb3BzLmlucHV0VmFsdWUsIHByb3BzLm9wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgICBjYXNlICdBcnJvd1JpZ2h0JzpcbiAgICAgICAgICAgIGlmIChpc0hpbnRWaXNpYmxlICYmICFldmVudC5zaGlmdEtleSAmJiBpbnB1dC5pc0N1cnNvckF0RW5kKCkpIHtcbiAgICAgICAgICAgICAgICBkaXIgPSBnZXRUZXh0RGlyZWN0aW9uKHByb3BzLmlucHV0VmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKChkaXIgPT09ICdsdHInICYmIGtleSA9PT0gJ0Fycm93UmlnaHQnKSB8fCAoZGlyID09PSAncnRsJyAmJiBrZXkgPT09ICdBcnJvd0xlZnQnKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wcy5vbkNvbXBsZXRlKGV2ZW50LCBwcm9wcy5oYW5kbGVIaW50KHByb3BzLmlucHV0VmFsdWUsIHByb3BzLm9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRW50ZXInOlxuICAgICAgICAgICAgX3RoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLmhpZGVIaW50KCk7XG4gICAgICAgICAgICBfdGhpcy5oaWRlRHJvcGRvd24oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICAgICAgX3RoaXMuaGlkZUhpbnQoKTtcbiAgICAgICAgICAgIF90aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBjYXNlICdBcnJvd0Rvd24nOlxuICAgICAgICAgICAgaWYgKHByb3BzLm9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5zaG93SGludCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNob3dEcm9wZG93bigpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzRHJvcGRvd25WaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpciA9IGtleSA9PT0gJ0Fycm93VXAnID8gLTE6IDE7XG4gICAgICAgICAgICAgICAgICAgIGhhc0hhbmRsZWRLZXlEb3duID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5uYXZpZ2F0ZShkaXIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBfdGhpcy5zdGF0ZS5zZWxlY3RlZEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzSW5wdXRWYWx1ZSA9IF90aGlzLnByZXZpb3VzSW5wdXRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gcHJldmlvdXNJbnB1dFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbk9mZnNldFRvcCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcGRvd247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlJ3JlIGN1cnJlbnRseSBvbiBhbiBvcHRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2F2ZSB0aGUgY3VycmVudCBgaW5wdXRgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzIHdlIG1pZ2h0IGFycm93IGJhY2sgdG8gaXQgbGF0ZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzSW5wdXRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcmV2aW91c0lucHV0VmFsdWUgPSBwcm9wcy5pbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBwcm9wcy5vcHRpb25zW3NlbGVjdGVkSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc2VsZWN0ZWQgb3B0aW9uIGFsd2F5cyBzY3JvbGwgdG8gdmlzaWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duID0gUmVhY3QuZmluZERPTU5vZGUoX3RoaXMucmVmcy5kcm9wZG93bik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRPcHRpb24gPSBkcm9wZG93bi5jaGlsZHJlbltzZWxlY3RlZEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25PZmZzZXRUb3AgPSBzZWxlY3RlZE9wdGlvbi5vZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9uT2Zmc2V0VG9wICsgc2VsZWN0ZWRPcHRpb24uY2xpZW50SGVpZ2h0ID4gZHJvcGRvd24uY2xpZW50SGVpZ2h0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbk9mZnNldFRvcCA8IGRyb3Bkb3duLnNjcm9sbFRvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93bi5zY3JvbGxUb3AgPSBvcHRpb25PZmZzZXRUb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5vbk9wdGlvbkNoYW5nZShldmVudCwgb3B0aW9uRGF0YSwgc2VsZWN0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5vbktleURvd24oZXZlbnQsIG9wdGlvbkRhdGEsIHNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoYXNIYW5kbGVkS2V5RG93bikge1xuICAgICAgICAgICAgaW5kZXggPSB0aGlzLnN0YXRlLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICBvcHRpb25EYXRhID0gaW5kZXggPCAwID8gcHJvcHMuaW5wdXRWYWx1ZSA6IHByb3BzLm9wdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgcHJvcHMub25LZXlEb3duKGV2ZW50LCBvcHRpb25EYXRhLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGFuZGxlT3B0aW9uQ2xpY2s6IGZ1bmN0aW9uKHNlbGVjdGVkSW5kZXgsIGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgICBwcm9wcyA9IF90aGlzLnByb3BzO1xuXG4gICAgICAgIF90aGlzLmZvY3VzKCk7XG4gICAgICAgIF90aGlzLmhpZGVIaW50KCk7XG4gICAgICAgIF90aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkSW5kZXgpO1xuICAgICAgICBwcm9wcy5vbk9wdGlvbkNsaWNrKGV2ZW50LCBwcm9wcy5vcHRpb25zW3NlbGVjdGVkSW5kZXhdLCBzZWxlY3RlZEluZGV4KTtcbiAgICB9LFxuXG4gICAgaGFuZGxlT3B0aW9uTW91c2VPdmVyOiBmdW5jdGlvbihzZWxlY3RlZEluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF90aGlzLnByb3BzLmhvdmVyU2VsZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRTZWxlY3RlZEluZGV4KHNlbGVjdGVkSW5kZXgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhhbmRsZU1vdXNlT3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoX3RoaXMucHJvcHMuaG92ZXJTZWxlY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFNlbGVjdGVkSW5kZXgoLTEpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGhhbmRsZVdpbmRvd0Nsb3NlOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgICAgIGlmICh0YXJnZXQgIT09IHdpbmRvdyAmJiAhdGhpcy5nZXRET01Ob2RlKCkuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgICAgICAgX3RoaXMuaGlkZUhpbnQoKTtcbiAgICAgICAgICAgIF90aGlzLmhpZGVEcm9wZG93bigpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ6dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk5VmMyVnljeTkzWVd4MFpYSnRZVzVuWlhJdmNtVndiM012Y21WaFkzUXRkSGx3WldGb1pXRmtMV052YlhCdmJtVnVkQzl6Y21NdlkyOXRjRzl1Wlc1MGN5OTBlWEJsWVdobFlXUXVhbk40SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3UVVGQlFTeFpRVUZaTEVOQlFVTTdPMEZCUldJc1NVRkJTU3hMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXp0SlFVTjRRaXhMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXp0SlFVTTVRaXhWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEcxQ1FVRnRRaXhEUVVGRE8wbEJRM3BETEdkQ1FVRm5RaXhIUVVGSExFOUJRVThzUTBGQlF5dzJRa0ZCTmtJc1EwRkJRenRCUVVNM1JDeEpRVUZKTEVsQlFVa3NSMEZCUnl4WFFVRlhMRVZCUVVVc1EwRkJRenM3UVVGRmVrSXNUVUZCVFN4RFFVRkRMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETzBGQlEyNURMRWxCUVVrc1YwRkJWeXhGUVVGRkxGZEJRVmM3TzBsQlJYaENMRTlCUVU4c1JVRkJSVHRSUVVOTUxHZENRVUZuUWl4SFFVRkhMRmRCUVZjN1FVRkRkRU1zV1VGQldTeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN08xbEJSV1FzVDBGQlR5eFhRVUZYTzJkQ1FVTmtMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU03WVVGRGJFSXNRMEZCUXp0VFFVTk1MRVZCUVVVc1EwRkJRenRCUVVOYUxFdEJRVXM3TzBsQlJVUXNVMEZCVXl4RlFVRkZMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVVVGQlVTeExRVUZMTEZsQlFWa3NSMEZCUnl4RlFVRkZMRWRCUVVjN1VVRkRjRVFzVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1RVRkJUVHRSUVVNdlFpeFRRVUZUTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTk8xRkJRMnBETEZOQlFWTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTA3VVVGRGFrTXNVMEZCVXl4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNUdFJRVU12UWl4WFFVRlhMRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTzFGQlEycERMRlZCUVZVc1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMDdVVUZEYkVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3p0UlFVTTVRaXhYUVVGWExFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5PMUZCUTI1RExGRkJRVkVzUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrN1VVRkRPVUlzVTBGQlV5eEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTVHRSUVVNdlFpeFZRVUZWTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSk8xRkJRMmhETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3VVVGRE4wSXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNUdFJRVU0zUWl4TlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTzFGQlF6VkNMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVazdVVUZET1VJc1dVRkJXU3hGUVVGRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1R0UlFVTnNReXhWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpPMUZCUTJoRExGVkJRVlVzUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrN1VVRkRhRU1zWVVGQllTeEZRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTVHRSUVVOdVF5eGpRVUZqTEVWQlFVVXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSk8xRkJRM0JETEdOQlFXTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3VVVGRGNFTXNaVUZCWlN4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNUdFJRVU55UXl4alFVRmpMRVZCUVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlR0UlFVTXZReXh0UWtGQmJVSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWs3VVVGRGVrTXNORUpCUVRSQ0xFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpPMEZCUXpGRUxFdEJRVXM3TzBsQlJVUXNaVUZCWlN4RlFVRkZMRmRCUVZjN1VVRkRlRUlzVDBGQlR6dFpRVU5JTEZOQlFWTXNSVUZCUlN4RlFVRkZPMWxCUTJJc1ZVRkJWU3hGUVVGRkxFVkJRVVU3V1VGRFpDeFBRVUZQTEVWQlFVVXNSVUZCUlR0WlFVTllMRmRCUVZjc1JVRkJSU3hKUVVGSk8xbEJRMnBDTEU5QlFVOHNSVUZCUlN4SlFVRkpPMWxCUTJJc1UwRkJVeXhGUVVGRkxFbEJRVWs3V1VGRFppeFJRVUZSTEVWQlFVVXNTVUZCU1R0WlFVTmtMRmxCUVZrc1JVRkJSU3hKUVVGSk8xbEJRMnhDTEZWQlFWVXNSVUZCUlN4WFFVRlhPMmRDUVVOdVFpeFBRVUZQTEVWQlFVVXNRMEZCUXp0aFFVTmlPMWxCUTBRc1lVRkJZU3hGUVVGRkxFbEJRVWs3V1VGRGJrSXNZMEZCWXl4RlFVRkZMRWxCUVVrN1dVRkRjRUlzVlVGQlZTeEhRVUZITEVsQlFVazdXVUZEYWtJc1kwRkJZeXhGUVVGRkxFbEJRVWs3V1VGRGNFSXNaVUZCWlN4RlFVRkZMRWxCUVVrN1dVRkRja0lzYlVKQlFXMUNMRVZCUVVVc1YwRkJWenRuUWtGRE5VSXNUMEZCVHl4RlFVRkZMRU5CUVVNN1lVRkRZanRaUVVORUxEUkNRVUUwUWl4RlFVRkZMRk5CUVZNc1RVRkJUU3hGUVVGRk8yZENRVU16UXp0dlFrRkRTU3hOUVVGTkxFZEJRVWNzSzBSQlFTdEVPMnRDUVVNeFJUdGhRVU5NTzFOQlEwb3NRMEZCUXp0QlFVTldMRTFCUVUwN08wbEJSVVlzWlVGQlpTeEZRVUZGTEZkQlFWYzdVVUZEZUVJc1QwRkJUenRaUVVOSUxHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVTTdXVUZEYWtJc1lVRkJZU3hGUVVGRkxFdEJRVXM3V1VGRGNFSXNhVUpCUVdsQ0xFVkJRVVVzUzBGQlN6dFRRVU16UWl4RFFVRkRPMEZCUTFZc1MwRkJTenM3U1VGRlJDeHJRa0ZCYTBJc1JVRkJSU3hYUVVGWE8xRkJRek5DTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrN1FVRkRlRUlzV1VGQldTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4RFFVRkRPenRSUVVWdVJDeExRVUZMTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVNMVFpeExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeERRVUZETzFGQlEyaERMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4dFEwRkJiVU1zUjBGQlJ5eFJRVUZSTEVOQlFVTTdVVUZETVVVc1MwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5d3dRa0ZCTUVJc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGRGFFVXNTMEZCU3pzN1NVRkZSQ3hwUWtGQmFVSXNSVUZCUlN4WFFVRlhPMUZCUXpGQ0xFbEJRVWtzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4blFrRkJaMEk3UVVGRE9VTXNXVUZCV1N4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU03UVVGRGRrUTdRVUZEUVRzN1FVRkZRU3hSUVVGUkxGRkJRVkVzUTBGQlF5eFBRVUZQTEVWQlFVVXNhVUpCUVdsQ0xFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEYmtRN08xRkJSVkVzVVVGQlVTeERRVUZETEU5QlFVOHNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTndSQ3hMUVVGTE96dEpRVVZFTEc5Q1FVRnZRaXhGUVVGRkxGZEJRVmM3VVVGRE4wSXNTVUZCU1N4WFFVRlhMRWRCUVVjc1RVRkJUU3hEUVVGRExHMUNRVUZ0UWp0QlFVTndSQ3haUVVGWkxHbENRVUZwUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXpzN1VVRkZMME1zVjBGQlZ5eERRVUZETEU5QlFVOHNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0UlFVTTVReXhYUVVGWExFTkJRVU1zVDBGQlR5eEZRVUZGTEdsQ1FVRnBRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzWkVMRXRCUVVzN08wbEJSVVFzZVVKQlFYbENMRVZCUVVVc1UwRkJVeXhUUVVGVExFVkJRVVU3VVVGRE0wTXNTVUZCU1N4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRExGVkJRVlU3V1VGRGFFTXNWMEZCVnl4SFFVRkhMRk5CUVZNc1EwRkJReXhQUVVGUE8xbEJReTlDTEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1RVRkJUVHRCUVVNeFF5eFpRVUZaTEdGQlFXRXNSMEZCUnl4WFFVRlhMRWRCUVVjc1EwRkJRenRCUVVNelF6czdRVUZGUVN4blFrRkJaMElzVTBGQlV5eERRVUZETEZWQlFWVXNRMEZCUXl4VFFVRlRMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03TzFGQlJXNUdMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03V1VGRFZpeGhRVUZoTEVWQlFVVXNZVUZCWVR0VFFVTXZRaXhEUVVGRExFTkJRVU03UVVGRFdDeExRVUZMT3p0SlFVVkVMRTFCUVUwc1JVRkJSU3hYUVVGWE8wRkJRM1pDTEZGQlFWRXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE96dFJRVVZxUWp0WlFVTkpMRzlDUVVGQkxFdEJRVWtzUlVGQlFTeERRVUZCTzJkQ1FVTkJMRXRCUVVFc1JVRkJTeXhEUVVGRk8yOUNRVU5JTEZGQlFWRXNSVUZCUlN4VlFVRlZPMmxDUVVOMlFpeEZRVUZETzJkQ1FVTkdMRk5CUVVFc1JVRkJVeXhEUVVGRkxEUkNRVUUwUWl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlZ5eERRVUZCTEVWQlFVRTdaMEpCUTJoRkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVVXNSVUZCUXp0blFrRkRjRUlzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUlN4RlFVRkRPMmRDUVVOMlFpeExRVUZMTEVOQlFVTXNNa0pCUVRKQ0xFVkJRVVVzUlVGQlF6dG5Ra0ZEY0VNc1MwRkJTeXhEUVVGRExHMURRVUZ0UXl4RlFVRkhPMWxCUXpORExFTkJRVUU3VlVGRFVqdEJRVU5XTEV0QlFVczdPMGxCUlVRc1YwRkJWeXhGUVVGRkxGZEJRVmM3VVVGRGNFSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTVHRaUVVOYUxFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3p0WlFVTnVRaXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVczdXVUZEYmtJc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eFZRVUZWTzFsQlF6ZENMRk5CUVZNc1IwRkJSeXgxUWtGQmRVSTdRVUZETDBNc1dVRkJXU3hqUVVGakxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03TzFGQlJXeEVPMWxCUTBrc2IwSkJRVUVzUzBGQlNTeEZRVUZCTEVOQlFVRTdaMEpCUTBFc1MwRkJRU3hGUVVGTExFTkJRVVU3YjBKQlEwZ3NVVUZCVVN4RlFVRkZMRlZCUVZVN2FVSkJRM1pDTEVWQlFVTTdaMEpCUTBZc1UwRkJRU3hGUVVGVExFTkJRVU1zYVVOQlFXdERMRU5CUVVFc1JVRkJRVHRuUWtGRE5VTXNiMEpCUVVNc1MwRkJTeXhGUVVGQkxFTkJRVUU3YjBKQlEwWXNVVUZCUVN4RlFVRlJMRU5CUVVVc1NVRkJTU3hGUVVGRE8yOUNRVU5tTEVsQlFVRXNSVUZCU1N4RFFVRkRMR05CUVVFc1JVRkJZenR2UWtGRGJrSXNZVUZCUVN4RlFVRlhMRU5CUVVVc1NVRkJTU3hGUVVGRE8yOUNRVU5zUWl4SFFVRkJMRVZCUVVjc1EwRkJSU3hqUVVGakxFVkJRVU03YjBKQlEzQkNMRk5CUVVFc1JVRkJVeXhEUVVGRkxGTkJRVk1zUjBGQlJ5eDFRa0ZCZFVJc1JVRkJRenR2UWtGREwwTXNTMEZCUVN4RlFVRkxMRU5CUVVVN2QwSkJRMGdzUzBGQlN5eEZRVUZGTEZGQlFWRTdkMEpCUTJZc2JVSkJRVzFDTEVWQlFVVXNVVUZCVVR0M1FrRkROMElzVVVGQlVTeEZRVUZGTEZWQlFWVTdjVUpCUTNaQ0xFVkJRVU03YjBKQlEwWXNTMEZCUVN4RlFVRkxMRU5CUVVVc1MwRkJTeXhEUVVGRExHRkJRV0VzUjBGQlJ5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRlZCUVZVc1JVRkJSU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NTVUZCU3l4RFFVRkJPMmRDUVVOc1JpeERRVUZCTEVWQlFVRTdaMEpCUTBZc2IwSkJRVU1zUzBGQlN5eEZRVUZCTEVOQlFVRTdiMEpCUTBZc1IwRkJRU3hGUVVGSExFTkJRVU1zVDBGQlFTeEZRVUZQTzI5Q1FVTllMRWxCUVVFc1JVRkJTU3hEUVVGRExGVkJRVUVzUlVGQlZUdHZRa0ZEWml4WFFVRkJMRVZCUVZNc1EwRkJSU3hMUVVGTExFTkJRVU1zVTBGQlV5eEZRVUZETzI5Q1FVTXpRaXhsUVVGQkxFVkJRV0VzUTBGQlJTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVU03YjBKQlEzWkRMRzFDUVVGQkxFVkJRV2xDTEVOQlFVTXNUVUZCUVN4RlFVRk5PMjlDUVVONFFpeDFRa0ZCUVN4RlFVRnhRaXhEUVVGRkxFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1JVRkJRenR2UWtGRGFFUXNTMEZCUVN4RlFVRkxMRU5CUVVVc1ZVRkJWU3hGUVVGRE8yOUNRVU5zUWl4VlFVRkJMRVZCUVZVc1EwRkJSU3hMUVVGTExFVkJRVU03YjBKQlEyeENMRmxCUVVFc1JVRkJXU3hEUVVGRExFdEJRVUVzUlVGQlN6dHZRa0ZEYkVJc1YwRkJRU3hGUVVGWExFTkJRVU1zUzBGQlFTeEZRVUZMTzI5Q1FVTnFRaXhIUVVGQkxFVkJRVWNzUTBGQlJTeGpRVUZqTEVWQlFVTTdiMEpCUTNCQ0xFOUJRVUVzUlVGQlR5eERRVUZGTEV0QlFVc3NRMEZCUXl4WFFVRlhMRVZCUVVNN2IwSkJRek5DTEU5QlFVRXNSVUZCVHl4RFFVRkZMRXRCUVVzc1EwRkJReXhYUVVGWExFVkJRVU03YjBKQlF6TkNMRTFCUVVFc1JVRkJUU3hEUVVGRkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVTTdiMEpCUTNKQ0xGRkJRVUVzUlVGQlVTeERRVUZGTEV0QlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVNN2IwSkJRemRDTEZOQlFVRXNSVUZCVXl4RFFVRkZMRXRCUVVzc1EwRkJReXhoUVVGaExFVkJRVU03YjBKQlF5OUNMRVZCUVVFc1JVRkJSU3hEUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVTTdiMEpCUTJ4Q0xFbEJRVUVzUlVGQlNTeERRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVNN2IwSkJRM1JDTEZOQlFVRXNSVUZCVXl4RFFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRVU03YjBKQlF6TkNMRmRCUVVFc1JVRkJWeXhEUVVGRkxFdEJRVXNzUTBGQlF5eFhRVUZYTEVWQlFVTTdiMEpCUXk5Q0xGRkJRVUVzUlVGQlVTeERRVUZGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVNN2IwSkJRM3BDTEU5QlFVRXNSVUZCVHl4RFFVRkZMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVU03YjBKQlEzWkNMRlZCUVVFc1JVRkJWU3hEUVVGRkxFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVTTdiMEpCUXpkQ0xGTkJRVUVzUlVGQlV5eERRVUZGTEZOQlFWTXNSMEZCUnl3eVFrRkJNa0lzUlVGQlF6dHZRa0ZEYmtRc1MwRkJRU3hGUVVGTExFTkJRVVU3ZDBKQlEwZ3NVVUZCVVN4RlFVRkZMRlZCUVZVN2QwSkJRM0JDTEZWQlFWVXNSVUZCUlN4aFFVRmhPM0ZDUVVNelFpeERRVUZCTzJkQ1FVTktMRU5CUVVFN1dVRkRRU3hEUVVGQk8xVkJRMUk3UVVGRFZpeExRVUZMT3p0SlFVVkVMR05CUVdNc1JVRkJSU3hYUVVGWE8xRkJRM1pDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrN1dVRkRXaXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVczdXVUZEYmtJc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTzFsQlEyNUNMR05CUVdNc1IwRkJSeXhMUVVGTExFTkJRVU1zWTBGQll6dFpRVU55UXl4aFFVRmhMRWRCUVVjc1MwRkJTeXhEUVVGRExHRkJRV0U3V1VGRGJrTXNhVUpCUVdsQ0xFZEJRVWNzUzBGQlN5eERRVUZETEdsQ1FVRnBRanRCUVVOMlJDeFpRVUZaTEd0Q1FVRnJRaXhIUVVGSExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenM3VVVGRmJFUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUXk5Q0xFOUJRVThzU1VGQlNTeERRVUZETzBGQlEzaENMRk5CUVZNN08xRkJSVVE3V1VGRFNTeHZRa0ZCUVN4SlFVRkhMRVZCUVVFc1EwRkJRU3hEUVVGRExFVkJRVUVzUlVGQlJTeERRVUZGTEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVNN1owSkJRM0JDTEVkQlFVRXNSVUZCUnl4RFFVRkRMRlZCUVVFc1JVRkJWVHRuUWtGRFpDeEpRVUZCTEVWQlFVa3NRMEZCUXl4VFFVRkJMRVZCUVZNN1owSkJRMlFzWVVGQlFTeEZRVUZYTEVOQlFVVXNRMEZCUXl4cFFrRkJhVUlzUlVGQlF6dG5Ra0ZEYUVNc1MwRkJRU3hGUVVGTExFTkJRVVU3YjBKQlEwZ3NTMEZCU3l4RlFVRkZMRTFCUVUwN2IwSkJRMklzVlVGQlZTeEZRVUZGTEUxQlFVMDdiMEpCUTJ4Q0xGRkJRVkVzUlVGQlJTeFZRVUZWTzI5Q1FVTndRaXhUUVVGVExFVkJRVVVzV1VGQldUdHZRa0ZEZGtJc1QwRkJUeXhGUVVGRkxHbENRVUZwUWl4SFFVRkhMRTlCUVU4c1IwRkJSeXhOUVVGTk8ybENRVU5vUkN4RlFVRkRPMmRDUVVOR0xGTkJRVUVzUlVGQlV5eERRVUZETEhsQ1FVRkJMRVZCUVhsQ08yZENRVU51UXl4VlFVRkJMRVZCUVZVc1EwRkJSU3hKUVVGSkxFTkJRVU1zWTBGQlowSXNRMEZCUVN4RlFVRkJPMmRDUVVOb1F6dHZRa0ZEUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkROVVFzZDBKQlFYZENMRWxCUVVrc1ZVRkJWU3hIUVVGSExHRkJRV0VzUzBGQlN5eExRVUZMTEVOQlFVTTdPM2RDUVVWNlF6czBRa0ZEU1N4dlFrRkJRU3hKUVVGSExFVkJRVUVzUTBGQlFTeERRVUZETEVWQlFVRXNSVUZCUlN4RFFVRkZMRlZCUVZVc1IwRkJSeXhyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRVZCUVVNN1owTkJRek5ETEdWQlFVRXNSVUZCWVN4RFFVRkZMRlZCUVZVc1JVRkJRenRuUTBGRE1VSXNTVUZCUVN4RlFVRkpMRU5CUVVNc1VVRkJRU3hGUVVGUk8yZERRVU5pTEVkQlFVRXNSVUZCUnl4RFFVRkZMRXRCUVVzc1JVRkJRenRuUTBGRFdDeFBRVUZCTEVWQlFVOHNRMEZCUlN4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlF6dEJRVU53Uml4blEwRkJaME1zVjBGQlFTeEZRVUZYTEVOQlFVVXNTMEZCU3l4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhEUVVGSExFTkJRVUVzUlVGQlFUczdaME5CUlRkRUxHOUNRVUZETEdOQlFXTXNSVUZCUVN4RFFVRkJPMjlEUVVOWUxFbEJRVUVzUlVGQlNTeERRVUZGTEVsQlFVa3NSVUZCUXp0dlEwRkRXQ3hMUVVGQkxFVkJRVXNzUTBGQlJTeExRVUZMTEVWQlFVTTdiME5CUTJJc1kwRkJRU3hGUVVGakxFTkJRVVVzUzBGQlN5eERRVUZETEdOQlFXTXNSVUZCUXp0dlEwRkRja01zVlVGQlFTeEZRVUZWTEVOQlFVVXNTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJRenR2UTBGRE4wSXNWVUZCUVN4RlFVRlZMRU5CUVVVc1ZVRkJWeXhEUVVGQk8yZERRVU42UWl4RFFVRkJPelJDUVVORUxFTkJRVUU3TUVKQlExQTdjVUpCUTB3N1owSkJRMG83V1VGRFFTeERRVUZCTzFWQlExQTdRVUZEVml4TFFVRkxPenRKUVVWRUxESkNRVUV5UWl4RlFVRkZMRmRCUVZjN1VVRkRjRU1zU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1R0WlFVTmFMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN6dFpRVU51UWl4VlFVRlZMRWRCUVVjc1MwRkJTeXhEUVVGRExGVkJRVlU3UVVGRGVrTXNXVUZCV1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxGVkJRVlVzUTBGQlF6czdVVUZGY0VVN1dVRkRTU3h2UWtGQlF5eFZRVUZWTEVWQlFVRXNRMEZCUVR0blFrRkRVQ3hQUVVGQkxFVkJRVThzUTBGQlJTeExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NWVUZCVnl4RFFVRkJPMWxCUXpORUxFTkJRVUU3VlVGRFNqdEJRVU5XTEV0QlFVczdPMGxCUlVRc2JVTkJRVzFETEVWQlFVVXNWMEZCVnp0QlFVTndSQ3hSUVVGUkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN08xRkJSWFpDTzFsQlEwa3NiMEpCUVVNc1ZVRkJWU3hGUVVGQkxFTkJRVUU3WjBKQlExQXNUMEZCUVN4RlFVRlBMRU5CUVVVc1MwRkJTeXhEUVVGRExEUkNRVUUwUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZGTEVOQlFVRTdXVUZEY0VVc1EwRkJRVHRWUVVOS08wRkJRMVlzUzBGQlN6czdTVUZGUkN4WlFVRlpMRVZCUVVVc1YwRkJWenRCUVVNM1FpeFJRVUZSTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenM3VVVGRmFrSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1dVRkRhRU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXp0blFrRkRXQ3hwUWtGQmFVSXNSVUZCUlN4SlFVRkpPMkZCUXpGQ0xFVkJRVVVzVjBGQlZ6dG5Ra0ZEVml4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzJGQlEyaERMRU5CUVVNc1EwRkJRenRUUVVOT08wRkJRMVFzUzBGQlN6czdTVUZGUkN4WlFVRlpMRVZCUVVVc1YwRkJWenRCUVVNM1FpeFJRVUZSTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenM3VVVGRmFrSXNTVUZCU1N4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RlFVRkZPMWxCUXk5Q0xFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTTdaMEpCUTFnc2FVSkJRV2xDTEVWQlFVVXNTMEZCU3p0aFFVTXpRaXhGUVVGRkxGZEJRVmM3WjBKQlExWXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlF6dGhRVU5xUXl4RFFVRkRMRU5CUVVNN1UwRkRUanRCUVVOVUxFdEJRVXM3TzBsQlJVUXNVVUZCVVN4RlFVRkZMRmRCUVZjN1VVRkRha0lzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1R0WlFVTmFMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN6dFpRVU51UWl4VlFVRlZMRWRCUVVjc1MwRkJTeXhEUVVGRExGVkJRVlU3V1VGRE4wSXNaMEpCUVdkQ0xFZEJRVWNzVlVGQlZTeERRVUZETEUxQlFVMDdRVUZEYUVRc1dVRkJXU3hoUVVGaExFZEJRVWNzWjBKQlFXZENMRWRCUVVjc1EwRkJRenRCUVVOb1JEczdRVUZGUVN4blFrRkJaMElzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4VlFVRlZMRVZCUVVVc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNN08xRkJSWFpHTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNN1dVRkRXQ3hoUVVGaExFVkJRVVVzWVVGQllUdFRRVU12UWl4RFFVRkRMRU5CUVVNN1FVRkRXQ3hMUVVGTE96dEpRVVZFTEZGQlFWRXNSVUZCUlN4WFFVRlhPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdXVUZEVml4aFFVRmhMRVZCUVVVc1MwRkJTenRUUVVOMlFpeERRVUZETEVOQlFVTTdRVUZEV0N4TFFVRkxPenRKUVVWRUxHZENRVUZuUWl4RlFVRkZMRk5CUVZNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdFJRVU40UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8xbEJRMVlzWVVGQllTeEZRVUZGTEV0QlFVczdVMEZEZGtJc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU55UWl4TFFVRkxPenRKUVVWRUxGbEJRVmtzUlVGQlJTeFRRVUZUTEV0QlFVc3NSVUZCUlR0QlFVTnNReXhSUVVGUkxFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1VVRkZha0lzUzBGQlN5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRPMUZCUTJwQ0xFdEJRVXNzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXp0UlFVTnlRaXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU16UWl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTTFRaXhMUVVGTExFTkJRVU1zWTBGQll5eEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRMnhFTEV0QlFVczdPMGxCUlVRc1MwRkJTeXhGUVVGRkxGZEJRVmM3VVVGRFpDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0QlFVTTNReXhMUVVGTE96dEpRVVZFTEZkQlFWY3NSVUZCUlN4VFFVRlRMRXRCUVVzc1JVRkJSVHRCUVVOcVF5eFJRVUZSTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRenM3VVVGRmFrSXNTMEZCU3l4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGRE8xRkJRM0pDTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEyNURMRXRCUVVzN08wbEJSVVFzVjBGQlZ5eEZRVUZGTEZOQlFWTXNTMEZCU3l4RlFVRkZPMEZCUTJwRExGRkJRVkVzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRPenRSUVVWcVFpeExRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1VVRkRha0lzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03UVVGRGVFTXNTMEZCU3pzN1NVRkZSQ3hSUVVGUkxFVkJRVVVzVTBGQlV5eFRRVUZUTEVWQlFVVXNVVUZCVVN4RlFVRkZPMUZCUTNCRExFbEJRVWtzUzBGQlN5eEhRVUZITEVsQlFVazdXVUZEV2l4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRMklzVVVGQlVTeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETzBGQlEzSkVMRmxCUVZrc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4SFFVRkhMRk5CUVZNc1EwRkJRenM3VVVGRmJFUXNTVUZCU1N4TFFVRkxMRWRCUVVjc1VVRkJVU3hGUVVGRk8xbEJRMnhDTEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNN1UwRkRjRUlzVFVGQlRTeEpRVUZKTEV0QlFVc3NSMEZCUnl4UlFVRlJMRVZCUVVVN1dVRkRla0lzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTTNRaXhUUVVGVE96dFJRVVZFTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN1FVRkRhRVFzUzBGQlN6czdTVUZGUkN4aFFVRmhMRVZCUVVVc1UwRkJVeXhMUVVGTExFVkJRVVU3VVVGRE0wSXNTVUZCU1N4TFFVRkxMRWRCUVVjc1NVRkJTVHRaUVVOYUxFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNSMEZCUnp0WlFVTm1MRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN6dFpRVU51UWl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTzFsQlEzaENMR2xDUVVGcFFpeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTzFsQlEycEVMR0ZCUVdFc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEdGQlFXRTdXVUZEZWtNc2FVSkJRV2xDTEVkQlFVY3NTMEZCU3p0WlFVTjZRaXhMUVVGTE8xbEJRMHdzVlVGQlZUdEJRVU4wUWl4WlFVRlpMRWRCUVVjc1EwRkJRenM3VVVGRlVpeFJRVUZSTEVkQlFVYzdVVUZEV0N4TFFVRkxMRXRCUVVzc1EwRkJRenRSUVVOWUxFdEJRVXNzUzBGQlN6dFpRVU5PTEVsQlFVa3NZVUZCWVN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJUdG5Ra0ZEYkVNc1MwRkJTeXhEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzJkQ1FVTjJRaXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03WVVGRE9VVTdXVUZEUkN4TlFVRk5PMUZCUTFZc1MwRkJTeXhYUVVGWExFTkJRVU03VVVGRGFrSXNTMEZCU3l4WlFVRlpPMWxCUTJJc1NVRkJTU3hoUVVGaExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4SlFVRkpMRXRCUVVzc1EwRkJReXhoUVVGaExFVkJRVVVzUlVGQlJUdEJRVU16UlN4blFrRkJaMElzUjBGQlJ5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1owSkJSWHBETEVsQlFVa3NRMEZCUXl4SFFVRkhMRXRCUVVzc1MwRkJTeXhKUVVGSkxFZEJRVWNzUzBGQlN5eFpRVUZaTEUxQlFVMHNSMEZCUnl4TFFVRkxMRXRCUVVzc1NVRkJTU3hIUVVGSExFdEJRVXNzVjBGQlZ5eERRVUZETEVWQlFVVTdiMEpCUTI1R0xFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dHBRa0ZET1VVN1lVRkRTanRaUVVORUxFMUJRVTA3VVVGRFZpeExRVUZMTEU5QlFVODdXVUZEVWl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03V1VGRFpDeExRVUZMTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1dVRkRha0lzUzBGQlN5eERRVUZETEZsQlFWa3NSVUZCUlN4RFFVRkRPMWxCUTNKQ0xFMUJRVTA3VVVGRFZpeExRVUZMTEZGQlFWRTdXVUZEVkN4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03V1VGRGFrSXNTMEZCU3l4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGRE8xbEJRM0pDTEUxQlFVMDdVVUZEVml4TFFVRkxMRk5CUVZNc1EwRkJRenRSUVVObUxFdEJRVXNzVjBGQlZ6dFpRVU5hTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzBGQlF6RkRMR2RDUVVGblFpeExRVUZMTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN08yZENRVVYyUWl4TFFVRkxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU03UVVGRGFrTXNaMEpCUVdkQ0xFdEJRVXNzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXpzN1owSkJSWEpDTEVsQlFVa3NhVUpCUVdsQ0xFVkJRVVU3YjBKQlEyNUNMRWRCUVVjc1IwRkJSeXhIUVVGSExFdEJRVXNzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVOd1JDeHZRa0ZCYjBJc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1N4RFFVRkRPenR2UWtGRmVrSXNTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFVkJRVVVzVjBGQlZ6dDNRa0ZETTBJc1NVRkJTU3hoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhPelJDUVVONlF5eHJRa0ZCYTBJc1IwRkJSeXhMUVVGTExFTkJRVU1zYTBKQlFXdENPelJDUVVNM1F5eFZRVUZWTEVkQlFVY3NhMEpCUVd0Q096UkNRVU12UWl4bFFVRmxMRWRCUVVjc1EwRkJRenMwUWtGRGJrSXNZMEZCWXp0QlFVTXhReXcwUWtGQk5FSXNVVUZCVVN4RFFVRkRPMEZCUTNKRE96dEJRVVZCTEhkQ1FVRjNRaXhKUVVGSkxHRkJRV0VzU1VGQlNTeERRVUZETEVWQlFVVTdRVUZEYUVRN096UkNRVVUwUWl4SlFVRkpMR3RDUVVGclFpeExRVUZMTEVsQlFVa3NSVUZCUlR0blEwRkROMElzUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhIUVVGSExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTTdRVUZETlVVc05rSkJRVFpDT3p0QlFVVTNRaXcwUWtGQk5FSXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdPelJDUVVVeFF5eFJRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPelJDUVVOc1JDeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6czBRa0ZEYkVRc1pVRkJaU3hIUVVGSExHTkJRV01zUTBGQlF5eFRRVUZUTEVOQlFVTTdORUpCUXpORExFZEJRVWNzWlVGQlpTeEhRVUZITEdOQlFXTXNRMEZCUXl4WlFVRlpMRWRCUVVjc1VVRkJVU3hEUVVGRExGbEJRVms3WjBOQlEzQkZMR1ZCUVdVc1IwRkJSeXhSUVVGUkxFTkJRVU1zVTBGQlV5eEZRVUZGTzJkRFFVTjBReXhSUVVGUkxFTkJRVU1zVTBGQlV5eEhRVUZITEdWQlFXVXNRMEZCUXpzMlFrRkRlRU03UVVGRE4wSXNlVUpCUVhsQ096dDNRa0ZGUkN4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUlVGQlJTeFZRVUZWTEVWQlFVVXNZVUZCWVN4RFFVRkRMRU5CUVVNN2QwSkJRM1pFTEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxGVkJRVlVzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0eFFrRkRja1FzUTBGQlF5eERRVUZETzJsQ1FVTk9PMEZCUTJwQ0xHRkJRV0U3TzFsQlJVUXNUVUZCVFR0QlFVTnNRaXhUUVVGVE96dFJRVVZFTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdFpRVU53UWl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTTdXVUZEYWtNc1ZVRkJWU3hIUVVGSExFdEJRVXNzUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTJwRkxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU0zUXp0QlFVTlVMRXRCUVVzN08wbEJSVVFzYVVKQlFXbENMRVZCUVVVc1UwRkJVeXhoUVVGaExFVkJRVVVzUzBGQlN5eEZRVUZGTzFGQlF6bERMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWs3UVVGRGVFSXNXVUZCV1N4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF6czdVVUZGZUVJc1MwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzFGQlEyUXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8xRkJRMnBDTEV0QlFVc3NRMEZCUXl4WlFVRlpMRVZCUVVVc1EwRkJRenRSUVVOeVFpeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZEZEVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTm9SaXhMUVVGTE96dEpRVVZFTEhGQ1FVRnhRaXhGUVVGRkxGTkJRVk1zWVVGQllTeEZRVUZGTzBGQlEyNUVMRkZCUVZFc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZET3p0UlFVVnFRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RlFVRkZPMWxCUTNwQ0xFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dFRRVU42UXp0QlFVTlVMRXRCUVVzN08wbEJSVVFzWTBGQll5eEZRVUZGTEZkQlFWYzdRVUZETDBJc1VVRkJVU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdPMUZCUldwQ0xFbEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRVZCUVVVN1dVRkRla0lzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZET1VJN1FVRkRWQ3hMUVVGTE96dEpRVVZFTEdsQ1FVRnBRaXhGUVVGRkxGTkJRVk1zUzBGQlN5eEZRVUZGTzFGQlF5OUNMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWs3UVVGRGVFSXNXVUZCV1N4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF6czdVVUZGTVVJc1NVRkJTU3hOUVVGTkxFdEJRVXNzVFVGQlRTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlR0WlFVTXhSQ3hMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTTdXVUZEYWtJc1MwRkJTeXhEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETzFOQlEzaENPMHRCUTBvN1EwRkRTaXhEUVVGRExFTkJRVU1pTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpZDFjMlVnYzNSeWFXTjBKenRjYmx4dWRtRnlJRkpsWVdOMElEMGdjbVZ4ZFdseVpTZ25jbVZoWTNRbktTeGNiaUFnSUNCSmJuQjFkQ0E5SUhKbGNYVnBjbVVvSnk0dmFXNXdkWFF1YW5ONEp5a3NYRzRnSUNBZ1FYSnBZVk4wWVhSMWN5QTlJSEpsY1hWcGNtVW9KeTR2WVhKcFlWOXpkR0YwZFhNdWFuTjRKeWtzWEc0Z0lDQWdaMlYwVkdWNGRFUnBjbVZqZEdsdmJpQTlJSEpsY1hWcGNtVW9KeTR1TDNWMGFXeHpMMmRsZEY5MFpYaDBYMlJwY21WamRHbHZiaWNwTEZ4dUlDQWdJRzV2YjNBZ1BTQm1kVzVqZEdsdmJpZ3BJSHQ5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxZV04wTG1OeVpXRjBaVU5zWVhOektIdGNiaUFnSUNCa2FYTndiR0Y1VG1GdFpUb2dKMVI1Y0dWaGFHVmhaQ2NzWEc1Y2JpQWdJQ0J6ZEdGMGFXTnpPaUI3WEc0Z0lDQWdJQ0FnSUdkbGRFbHVjM1JoYm1ObFEyOTFiblE2SUNobWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpiM1Z1ZENBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0t5dGpiM1Z1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUgwb0tTbGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NISnZjRlI1Y0dWek9pQndjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0ozQnliMlIxWTNScGIyNG5JRDhnZTMwZ09pQjdYRzRnSUNBZ0lDQWdJR2x1Y0hWMFNXUTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHbHVjSFYwVG1GdFpUb2dVbVZoWTNRdVVISnZjRlI1Y0dWekxuTjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbE9pQlNaV0ZqZEM1UWNtOXdWSGx3WlhNdWMzUnlhVzVuTEZ4dUlDQWdJQ0FnSUNCaGRYUnZSbTlqZFhNNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1aWIyOXNMRnh1SUNBZ0lDQWdJQ0JvYjNabGNsTmxiR1ZqZERvZ1VtVmhZM1F1VUhKdmNGUjVjR1Z6TG1KdmIyd3NYRzRnSUNBZ0lDQWdJR2x1Y0hWMFZtRnNkV1U2SUZKbFlXTjBMbEJ5YjNCVWVYQmxjeTV6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NWhjbkpoZVN4Y2JpQWdJQ0FnSUNBZ2NHeGhZMlZvYjJ4a1pYSTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NXpkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lHOXVRMmhoYm1kbE9pQlNaV0ZqZEM1UWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQWdJQ0FnYjI1TFpYbEViM2R1T2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNBZ0lDQWdiMjVMWlhsUWNtVnpjem9nVW1WaFkzUXVVSEp2Y0ZSNWNHVnpMbVoxYm1Nc1hHNGdJQ0FnSUNBZ0lHOXVTMlY1VlhBNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdJQ0J2YmtadlkzVnpPaUJTWldGamRDNVFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0FnSUNBZ2IyNUNiSFZ5T2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNBZ0lDQWdiMjVUWld4bFkzUTZJRkpsWVdOMExsQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJQ0FnSUNCdmJrbHVjSFYwUTJ4cFkyczZJRkpsWVdOMExsQnliM0JVZVhCbGN5NW1kVzVqTEZ4dUlDQWdJQ0FnSUNCb1lXNWtiR1ZJYVc1ME9pQlNaV0ZqZEM1UWNtOXdWSGx3WlhNdVpuVnVZeXhjYmlBZ0lDQWdJQ0FnYjI1RGIyMXdiR1YwWlRvZ1VtVmhZM1F1VUhKdmNGUjVjR1Z6TG1aMWJtTXNYRzRnSUNBZ0lDQWdJRzl1VDNCMGFXOXVRMnhwWTJzNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdJQ0J2Yms5d2RHbHZia05vWVc1blpUb2dVbVZoWTNRdVVISnZjRlI1Y0dWekxtWjFibU1zWEc0Z0lDQWdJQ0FnSUc5dVJISnZjR1J2ZDI1UGNHVnVPaUJTWldGamRDNVFjbTl3Vkhsd1pYTXVablZ1WXl4Y2JpQWdJQ0FnSUNBZ2IyNUVjbTl3Wkc5M2JrTnNiM05sT2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVl5eGNiaUFnSUNBZ0lDQWdiM0IwYVc5dVZHVnRjR3hoZEdVNklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMbWx6VW1WeGRXbHlaV1FzWEc0Z0lDQWdJQ0FnSUdkbGRFMWxjM05oWjJWR2IzSlBjSFJwYjI0NklGSmxZV04wTGxCeWIzQlVlWEJsY3k1bWRXNWpMRnh1SUNBZ0lDQWdJQ0JuWlhSTlpYTnpZV2RsUm05eVNXNWpiMjFwYm1kUGNIUnBiMjV6T2lCU1pXRmpkQzVRY205d1ZIbHdaWE11Wm5WdVkxeHVJQ0FnSUgwc1hHNWNiaUFnSUNCblpYUkVaV1poZFd4MFVISnZjSE02SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJ4aGMzTk9ZVzFsT2lBbkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWNIVjBWbUZzZFdVNklDY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3pvZ1cxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCb2IzWmxjbE5sYkdWamREb2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl1Um05amRYTTZJRzV2YjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Ymt0bGVVUnZkMjQ2SUc1dmIzQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrTm9ZVzVuWlRvZ2JtOXZjQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVTVzV3ZFhSRGJHbGphem9nYm05dmNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVWhwYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW5KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCdmJrOXdkR2x2YmtOc2FXTnJPaUJ1YjI5d0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1UGNIUnBiMjVEYUdGdVoyVTZJRzV2YjNBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2YmtOdmJYQnNaWFJsT2lBZ2JtOXZjQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOXVSSEp2Y0dSdmQyNVBjR1Z1T2lCdWIyOXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNUVjbTl3Wkc5M2JrTnNiM05sT2lCdWIyOXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBUV1Z6YzJGblpVWnZjazl3ZEdsdmJqb2dablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHZGxkRTFsYzNOaFoyVkdiM0pKYm1OdmJXbHVaMDl3ZEdsdmJuTTZJR1oxYm1OMGFXOXVLRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1MWJXSmxjaUFySUNjZ2MzVm5aMlZ6ZEdsdmJuTWdZWEpsSUdGMllXbHNZV0pzWlM0Z1ZYTmxJSFZ3SUdGdVpDQmtiM2R1SUdGeWNtOTNjeUIwYnlCelpXeGxZM1F1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUgwc1hHNWNiaUFnSUNCblpYUkpibWwwYVdGc1UzUmhkR1U2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JKYm1SbGVEb2dMVEVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMGhwYm5SV2FYTnBZbXhsT2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHpSSEp2Y0dSdmQyNVdhWE5wWW14bE9pQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCamIyMXdiMjVsYm5SWGFXeHNUVzkxYm5RNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RXNXBjWFZsU1dRZ1BTQjBhR2x6TG1OdmJuTjBjblZqZEc5eUxtZGxkRWx1YzNSaGJtTmxRMjkxYm5Rb0tUdGNibHh1SUNBZ0lDQWdJQ0JmZEdocGN5NTFjMlZ5U1c1d2RYUldZV3gxWlNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkJ5WlhacGIzVnpTVzV3ZFhSV1lXeDFaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJRjkwYUdsekxtRmpkR2wyWlVSbGMyTmxibVJoYm5SSlpDQTlJQ2R5WldGamRDMTBlWEJsWVdobFlXUXRZV04wYVhabFpHVnpZMlZ1WkdGdWRDMG5JQ3NnZFc1cGNYVmxTV1E3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbTl3ZEdsdmJuTkpaQ0E5SUNkeVpXRmpkQzEwZVhCbFlXaGxZV1F0YjNCMGFXOXVjeTBuSUNzZ2RXNXBjWFZsU1dRN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdGa1pFVjJaVzUwSUQwZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWWGFXNWtiM2REYkc5elpTQTlJSFJvYVhNdWFHRnVaR3hsVjJsdVpHOTNRMnh2YzJVN1hHNWNiaUFnSUNBZ0lDQWdMeThnVkdobElHQm1iMk4xYzJBZ1pYWmxiblFnWkc5bGN5QnViM1FnWW5WaVlteGxMQ0J6YnlCM1pTQnRkWE4wSUdOaGNIUjFjbVVnYVhRZ2FXNXpkR1ZoWkM1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCamJHOXpaWE1nVkhsd1pXRm9aV0ZrSjNNZ1pISnZjR1J2ZDI0Z2QyaGxibVYyWlhJZ2MyOXRaWFJvYVc1bklHVnNjMlVnWjJGcGJuTWdabTlqZFhNdVhHNGdJQ0FnSUNBZ0lHRmtaRVYyWlc1MEtDZG1iMk4xY3ljc0lHaGhibVJzWlZkcGJtUnZkME5zYjNObExDQjBjblZsS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTQmpiR2xqYXlCaGJubDNhR1Z5WlNCdmRYUnphV1JsSUc5bUlGUjVjR1ZoYUdWaFpDd2dZMnh2YzJVZ2RHaGxJR1J5YjNCa2IzZHVMbHh1SUNBZ0lDQWdJQ0JoWkdSRmRtVnVkQ2duWTJ4cFkyc25MQ0JvWVc1a2JHVlhhVzVrYjNkRGJHOXpaU3dnWm1Gc2MyVXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmpiMjF3YjI1bGJuUlhhV3hzVlc1dGIzVnVkRG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlcxdmRtVkZkbVZ1ZENBOUlIZHBibVJ2ZHk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxWMmx1Wkc5M1EyeHZjMlVnUFNCMGFHbHpMbWhoYm1Sc1pWZHBibVJ2ZDBOc2IzTmxPMXh1WEc0Z0lDQWdJQ0FnSUhKbGJXOTJaVVYyWlc1MEtDZG1iMk4xY3ljc0lHaGhibVJzWlZkcGJtUnZkME5zYjNObExDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ2NtVnRiM1psUlhabGJuUW9KMk5zYVdOckp5d2dhR0Z1Wkd4bFYybHVaRzkzUTJ4dmMyVXNJR1poYkhObEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyOXRjRzl1Wlc1MFYybHNiRkpsWTJWcGRtVlFjbTl3Y3pvZ1puVnVZM1JwYjI0b2JtVjRkRkJ5YjNCektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYaDBWbUZzZFdVZ1BTQnVaWGgwVUhKdmNITXVhVzV3ZFhSV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFJQY0hScGIyNXpJRDBnYm1WNGRGQnliM0J6TG05d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlV4bGJtZDBhQ0E5SUc1bGVIUldZV3gxWlM1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBjMGhwYm5SV2FYTnBZbXhsSUQwZ2RtRnNkV1ZNWlc1bmRHZ2dQaUF3SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRU0IyYVhOcFlteGxJSEJoY25RZ2IyWWdkR2hsSUdocGJuUWdiWFZ6ZENCaVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0YyWVdsc1lXSnNaU0JtYjNJZ2RYTWdkRzhnWTI5dGNHeGxkR1VnYVhRdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRkJ5YjNCekxtaGhibVJzWlVocGJuUW9ibVY0ZEZaaGJIVmxMQ0J1WlhoMFQzQjBhVzl1Y3lrdWMyeHBZMlVvZG1Gc2RXVk1aVzVuZEdncExteGxibWQwYUNBK0lEQTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwaHBiblJXYVhOcFlteGxPaUJwYzBocGJuUldhWE5wWW14bFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaVzVrWlhJNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQThaR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVTllM3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXphWFJwYjI0NklDZHlaV3hoZEdsMlpTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05zWVhOelRtRnRaVDE3SjNKbFlXTjBMWFI1Y0dWaGFHVmhaQzFqYjI1MFlXbHVaWElnSnlBcklGOTBhR2x6TG5CeWIzQnpMbU5zWVhOelRtRnRaWDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTE5MGFHbHpMbkpsYm1SbGNrbHVjSFYwS0NsOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxOTBhR2x6TG5KbGJtUmxja1J5YjNCa2IzZHVLQ2w5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTE5MGFHbHpMbkpsYm1SbGNrRnlhV0ZOWlhOellXZGxSbTl5VDNCMGFXOXVjeWdwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0ZmRHaHBjeTV5Wlc1a1pYSkJjbWxoVFdWemMyRm5aVVp2Y2tsdVkyOXRhVzVuVDNCMGFXOXVjeWdwZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzlrYVhZK1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxibVJsY2tsdWNIVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdYM1JvYVhNdWMzUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3Y3lBOUlGOTBhR2x6TG5CeWIzQnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFJXWVd4MVpTQTlJSEJ5YjNCekxtbHVjSFYwVm1Gc2RXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCamJHRnpjMDVoYldVZ1BTQW5jbVZoWTNRdGRIbHdaV0ZvWldGa0xXbHVjSFYwSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMFJHbHlaV04wYVc5dUlEMGdaMlYwVkdWNGRFUnBjbVZqZEdsdmJpaHBibkIxZEZaaGJIVmxLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdQR1JwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxQWHQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQW5jbVZzWVhScGRtVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYkdGemMwNWhiV1U5SjNKbFlXTjBMWFI1Y0dWaGFHVmhaQzFwYm5CMWRDMWpiMjUwWVdsdVpYSW5QbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhKYm5CMWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOaFlteGxaRDE3ZEhKMVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY205c1pUMG5jSEpsYzJWdWRHRjBhVzl1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWxoTFdocFpHUmxiajE3ZEhKMVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdseVBYdHBibkIxZEVScGNtVmpkR2x2Ym4xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnhoYzNOT1lXMWxQWHRqYkdGemMwNWhiV1VnS3lBbklISmxZV04wTFhSNWNHVmhhR1ZoWkMxb2FXNTBKMzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJHOXlPaUFuYzJsc2RtVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRmRsWW10cGRGUmxlSFJHYVd4c1EyOXNiM0k2SUNkemFXeDJaWEluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emFYUnBiMjQ2SUNkaFluTnZiSFYwWlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U5ZTNOMFlYUmxMbWx6U0dsdWRGWnBjMmxpYkdVZ1B5QndjbTl3Y3k1b1lXNWtiR1ZJYVc1MEtHbHVjSFYwVm1Gc2RXVXNJSEJ5YjNCekxtOXdkR2x2Ym5NcElEb2diblZzYkgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdlBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeEpibkIxZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV1k5SjJsdWNIVjBKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIyeGxQU2RqYjIxaWIySnZlQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSnBZUzF2ZDI1elBYdGZkR2hwY3k1dmNIUnBiMjV6U1dSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdFdFpYaHdZVzVrWldROWUzTjBZWFJsTG1selJISnZjR1J2ZDI1V2FYTnBZbXhsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhjbWxoTFdGMWRHOWpiMjF3YkdWMFpUMG5ZbTkwYUNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWEpwWVMxaFkzUnBkbVZrWlhOalpXNWtZVzUwUFh0ZmRHaHBjeTVoWTNScGRtVkVaWE5qWlc1a1lXNTBTV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsUFh0cGJuQjFkRlpoYkhWbGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0dWc2JFTm9aV05yUFh0bVlXeHpaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVjBiME52YlhCc1pYUmxQU2R2Wm1ZblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YxZEc5RGIzSnlaV04wUFNkdlptWW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGNqMTdhVzV3ZFhSRWFYSmxZM1JwYjI1OVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1UTJ4cFkyczllMTkwYUdsekxtaGhibVJzWlVOc2FXTnJmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrWnZZM1Z6UFh0ZmRHaHBjeTVvWVc1a2JHVkdiMk4xYzMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVDYkhWeVBYdHdjbTl3Y3k1dmJrSnNkWEo5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFBYdGZkR2hwY3k1b1lXNWtiR1ZEYUdGdVoyVjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVMyVjVSRzkzYmoxN1gzUm9hWE11YUdGdVpHeGxTMlY1Ukc5M2JuMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdROWUzQnliM0J6TG1sdWNIVjBTV1I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U5ZTNCeWIzQnpMbWx1Y0hWMFRtRnRaWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVjBiMFp2WTNWelBYdHdjbTl3Y3k1aGRYUnZSbTlqZFhOOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGFHOXNaR1Z5UFh0d2NtOXdjeTV3YkdGalpXaHZiR1JsY24xY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVUWld4bFkzUTllM0J5YjNCekxtOXVVMlZzWldOMGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Ymt0bGVWVndQWHR3Y205d2N5NXZia3RsZVZWd2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J2Ymt0bGVWQnlaWE56UFh0d2NtOXdjeTV2Ymt0bGVWQnlaWE56ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR0Z6YzA1aGJXVTllMk5zWVhOelRtRnRaU0FySUNjZ2NtVmhZM1F0ZEhsd1pXRm9aV0ZrTFhWelpYSjBaWGgwSjMxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdVOWUzdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQW5jbVZzWVhScGRtVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nSjNSeVlXNXpjR0Z5Wlc1MEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5ZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0E4TDJScGRqNWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjbVZ1WkdWeVJISnZjR1J2ZDI0NklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1gzUm9hWE1nUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCZmRHaHBjeTV6ZEdGMFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWIzQnpJRDBnWDNSb2FYTXVjSEp2Y0hNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JQY0hScGIyNVVaVzF3YkdGMFpTQTlJSEJ5YjNCekxtOXdkR2x2YmxSbGJYQnNZWFJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWldOMFpXUkpibVJsZUNBOUlITjBZWFJsTG5ObGJHVmpkR1ZrU1c1a1pYZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwUnliM0JrYjNkdVZtbHphV0pzWlNBOUlITjBZWFJsTG1selJISnZjR1J2ZDI1V2FYTnBZbXhsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZV04wYVhabFJHVnpZMlZ1WkdGdWRFbGtJRDBnWDNSb2FYTXVZV04wYVhabFJHVnpZMlZ1WkdGdWRFbGtPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeWIzQnpMbTl3ZEdsdmJuTXViR1Z1WjNSb0lEd2dNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEhWc0lHbGtQWHRmZEdocGN5NXZjSFJwYjI1elNXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZtUFNka2NtOXdaRzkzYmlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWIyeGxQU2RzYVhOMFltOTRKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdFdGFHbGtaR1Z1UFhzaGFYTkVjbTl3Wkc5M2JsWnBjMmxpYkdWOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUjViR1U5ZTN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnNklDY3hNREFsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbUZqYTJkeWIzVnVaRG9nSnlObVptWW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2IzTnBkR2x2YmpvZ0oyRmljMjlzZFhSbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05NFUybDZhVzVuT2lBblltOXlaR1Z5TFdKdmVDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGs2SUdselJISnZjR1J2ZDI1V2FYTnBZbXhsSUQ4Z0oySnNiMk5ySnlBNklDZHViMjVsSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeGhjM05PWVcxbFBTZHlaV0ZqZEMxMGVYQmxZV2hsWVdRdGIzQjBhVzl1Y3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrMXZkWE5sVDNWMFBYdDBhR2x6TG1oaGJtUnNaVTF2ZFhObFQzVjBmVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0J6TG05d2RHbHZibk11YldGd0tHWjFibU4wYVc5dUtHUmhkR0VzSUdsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2FYTlRaV3hsWTNSbFpDQTlJSE5sYkdWamRHVmtTVzVrWlhnZ1BUMDlJR2x1WkdWNE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHhzYVNCcFpEMTdhWE5UWld4bFkzUmxaQ0EvSUdGamRHbDJaVVJsYzJObGJtUmhiblJKWkNBNklHNTFiR3g5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5YVdFdGMyVnNaV04wWldROWUybHpVMlZzWldOMFpXUjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISnZiR1U5SjI5d2RHbHZiaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1UFh0cGJtUmxlSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVEYkdsamF6MTdYM1JvYVhNdWFHRnVaR3hsVDNCMGFXOXVRMnhwWTJzdVltbHVaQ2hmZEdocGN5d2dhVzVrWlhncGZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJrMXZkWE5sVDNabGNqMTdYM1JvYVhNdWFHRnVaR3hsVDNCMGFXOXVUVzkxYzJWUGRtVnlMbUpwYm1Rb1gzUm9hWE1zSUdsdVpHVjRLWDArWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEU5d2RHbHZibFJsYlhCc1lYUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFBYdGtZWFJoZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNWtaWGc5ZTJsdVpHVjRmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNrbHVjSFYwVm1Gc2RXVTllMTkwYUdsekxuVnpaWEpKYm5CMWRGWmhiSFZsZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFJXWVd4MVpUMTdjSEp2Y0hNdWFXNXdkWFJXWVd4MVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x6VTJWc1pXTjBaV1E5ZTJselUyVnNaV04wWldSOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQQzlzYVQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQQzkxYkQ1Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVnVaR1Z5UVhKcFlVMWxjM05oWjJWR2IzSlBjSFJwYjI1ek9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0J6SUQwZ1gzUm9hWE11Y0hKdmNITXNYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJuQjFkRlpoYkhWbElEMGdjSEp2Y0hNdWFXNXdkWFJXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZiaUE5SUhCeWIzQnpMbTl3ZEdsdmJuTmJYM1JvYVhNdWMzUmhkR1V1YzJWc1pXTjBaV1JKYm1SbGVGMGdmSHdnYVc1d2RYUldZV3gxWlR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnUEVGeWFXRlRkR0YwZFhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsUFh0d2NtOXdjeTVuWlhSTlpYTnpZV2RsUm05eVQzQjBhVzl1S0c5d2RHbHZiaWtnZkh3Z2FXNXdkWFJXWVd4MVpYMWNiaUFnSUNBZ0lDQWdJQ0FnSUM4K1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxibVJsY2tGeWFXRk5aWE56WVdkbFJtOXlTVzVqYjIxcGJtZFBjSFJwYjI1ek9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQnliM0J6SUQwZ2RHaHBjeTV3Y205d2N6dGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1BFRnlhV0ZUZEdGMGRYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFBYdHdjbTl3Y3k1blpYUk5aWE56WVdkbFJtOXlTVzVqYjIxcGJtZFBjSFJwYjI1ektIQnliM0J6TG05d2RHbHZibk11YkdWdVozUm9LWDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOCtYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSE5vYjNkRWNtOXdaRzkzYmpvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmZkR2hwY3k1emRHRjBaUzVwYzBSeWIzQmtiM2R1Vm1semFXSnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpSSEp2Y0dSdmQyNVdhWE5wWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMQ0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV3Y205d2N5NXZia1J5YjNCa2IzZHVUM0JsYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FHbGtaVVJ5YjNCa2IzZHVPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWDNSb2FYTXVjM1JoZEdVdWFYTkVjbTl3Wkc5M2JsWnBjMmxpYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbk5sZEZOMFlYUmxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYzBSeWIzQmtiM2R1Vm1semFXSnNaVG9nWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuQnliM0J6TG05dVJISnZjR1J2ZDI1RGJHOXpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzJodmQwaHBiblE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNITWdQU0JmZEdocGN5NXdjbTl3Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1Y0hWMFZtRnNkV1VnUFNCd2NtOXdjeTVwYm5CMWRGWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhSV1lXeDFaVXhsYm1kMGFDQTlJR2x1Y0hWMFZtRnNkV1V1YkdWdVozUm9MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FYTklhVzUwVm1semFXSnNaU0E5SUdsdWNIVjBWbUZzZFdWTVpXNW5kR2dnUGlBd0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUVNCMmFYTnBZbXhsSUhCaGNuUWdiMllnZEdobElHaHBiblFnYlhWemRDQmlaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGMllXbHNZV0pzWlNCbWIzSWdkWE1nZEc4Z1kyOXRjR3hsZEdVZ2FYUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0hNdWFHRnVaR3hsU0dsdWRDaHBibkIxZEZaaGJIVmxMQ0J3Y205d2N5NXZjSFJwYjI1ektTNXpiR2xqWlNocGJuQjFkRlpoYkhWbFRHVnVaM1JvS1M1c1pXNW5kR2dnUGlBd08xeHVYRzRnSUNBZ0lDQWdJRjkwYUdsekxuTmxkRk4wWVhSbEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdselNHbHVkRlpwYzJsaWJHVTZJR2x6U0dsdWRGWnBjMmxpYkdWY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHaHBaR1ZJYVc1ME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFJUZEdGMFpTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGMwaHBiblJXYVhOcFlteGxPaUJtWVd4elpWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjMlYwVTJWc1pXTjBaV1JKYm1SbGVEb2dablZ1WTNScGIyNG9hVzVrWlhnc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBVM1JoZEdVb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JKYm1SbGVEb2dhVzVrWlhoY2JpQWdJQ0FnSUNBZ2ZTd2dZMkZzYkdKaFkyc3BPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm9ZVzVrYkdWRGFHRnVaMlU2SUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11YzJodmQwaHBiblFvS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11YzJodmQwUnliM0JrYjNkdUtDazdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuTmxkRk5sYkdWamRHVmtTVzVrWlhnb0xURXBPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXdjbTl3Y3k1dmJrTm9ZVzVuWlNobGRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMblZ6WlhKSmJuQjFkRlpoYkhWbElEMGdaWFpsYm5RdWRHRnlaMlYwTG5aaGJIVmxPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm1iMk4xY3pvZ1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVm1jeTVwYm5CMWRDNW5aWFJFVDAxT2IyUmxLQ2t1Wm05amRYTW9LVHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdhR0Z1Wkd4bFJtOWpkWE02SUdaMWJtTjBhVzl1S0dWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11YzJodmQwUnliM0JrYjNkdUtDazdYRzRnSUNBZ0lDQWdJRjkwYUdsekxuQnliM0J6TG05dVJtOWpkWE1vWlhabGJuUXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm9ZVzVrYkdWRGJHbGphem9nWm5WdVkzUnBiMjRvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6YUc5M1NHbHVkQ2dwTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTV3Y205d2N5NXZia2x1Y0hWMFEyeHBZMnNvWlhabGJuUXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnVZWFpwWjJGMFpUb2dablZ1WTNScGIyNG9aR2x5WldOMGFXOXVMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdYM1JvYVhNZ1BTQjBhR2x6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV2x1U1c1a1pYZ2dQU0F0TVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoZUVsdVpHVjRJRDBnWDNSb2FYTXVjSEp2Y0hNdWIzQjBhVzl1Y3k1c1pXNW5kR2dnTFNBeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1a1pYZ2dQU0JmZEdocGN5NXpkR0YwWlM1elpXeGxZM1JsWkVsdVpHVjRJQ3NnWkdseVpXTjBhVzl1TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hwYm1SbGVDQStJRzFoZUVsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibVJsZUNBOUlHMXBia2x1WkdWNE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2x1WkdWNElEd2diV2x1U1c1a1pYZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ2JXRjRTVzVrWlhnN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JmZEdocGN5NXpaWFJUWld4bFkzUmxaRWx1WkdWNEtHbHVaR1Y0TENCallXeHNZbUZqYXlrN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdoaGJtUnNaVXRsZVVSdmQyNDZJR1oxYm1OMGFXOXVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYa2dQU0JsZG1WdWRDNXJaWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3Y3lBOUlGOTBhR2x6TG5CeWIzQnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFFnUFNCZmRHaHBjeTV5WldaekxtbHVjSFYwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhWE5FY205d1pHOTNibFpwYzJsaWJHVWdQU0JmZEdocGN5NXpkR0YwWlM1cGMwUnliM0JrYjNkdVZtbHphV0pzWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x6U0dsdWRGWnBjMmxpYkdVZ1BTQmZkR2hwY3k1emRHRjBaUzVwYzBocGJuUldhWE5wWW14bExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGelNHRnVaR3hsWkV0bGVVUnZkMjRnUFNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM0IwYVc5dVJHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBjanRjYmx4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JqWVhObElDZEZibVFuT2x4dUlDQWdJQ0FnSUNCallYTmxJQ2RVWVdJbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpTR2x1ZEZacGMybGliR1VnSmlZZ0lXVjJaVzUwTG5Ob2FXWjBTMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d2N5NXZia052YlhCc1pYUmxLR1YyWlc1MExDQndjbTl3Y3k1b1lXNWtiR1ZJYVc1MEtIQnliM0J6TG1sdWNIVjBWbUZzZFdVc0lIQnliM0J6TG05d2RHbHZibk1wS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RCY25KdmQweGxablFuT2x4dUlDQWdJQ0FnSUNCallYTmxJQ2RCY25KdmQxSnBaMmgwSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNocGMwaHBiblJXYVhOcFlteGxJQ1ltSUNGbGRtVnVkQzV6YUdsbWRFdGxlU0FtSmlCcGJuQjFkQzVwYzBOMWNuTnZja0YwUlc1a0tDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhJZ1BTQm5aWFJVWlhoMFJHbHlaV04wYVc5dUtIQnliM0J6TG1sdWNIVjBWbUZzZFdVcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Noa2FYSWdQVDA5SUNkc2RISW5JQ1ltSUd0bGVTQTlQVDBnSjBGeWNtOTNVbWxuYUhRbktTQjhmQ0FvWkdseUlEMDlQU0FuY25Sc0p5QW1KaUJyWlhrZ1BUMDlJQ2RCY25KdmQweGxablFuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d2N5NXZia052YlhCc1pYUmxLR1YyWlc1MExDQndjbTl3Y3k1b1lXNWtiR1ZJYVc1MEtIQnliM0J6TG1sdWNIVjBWbUZzZFdVc0lIQnliM0J6TG05d2RHbHZibk1wS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuUlc1MFpYSW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11Wm05amRYTW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1ocFpHVklhVzUwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NW9hV1JsUkhKdmNHUnZkMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkRmMyTmhjR1VuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFHbGtaVWhwYm5Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbWhwWkdWRWNtOXdaRzkzYmlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJR05oYzJVZ0owRnljbTkzVlhBbk9seHVJQ0FnSUNBZ0lDQmpZWE5sSUNkQmNuSnZkMFJ2ZDI0bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliM0J6TG05d2RHbHZibk11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV6YUc5M1NHbHVkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbk5vYjNkRWNtOXdaRzkzYmlncE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dselJISnZjR1J2ZDI1V2FYTnBZbXhsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwY2lBOUlHdGxlU0E5UFQwZ0owRnljbTkzVlhBbklEOGdMVEU2SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYzBoaGJtUnNaV1JMWlhsRWIzZHVJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV1WVhacFoyRjBaU2hrYVhJc0lHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhObGJHVmpkR1ZrU1c1a1pYZ2dQU0JmZEdocGN5NXpkR0YwWlM1elpXeGxZM1JsWkVsdVpHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeVpYWnBiM1Z6U1c1d2RYUldZV3gxWlNBOUlGOTBhR2x6TG5CeVpYWnBiM1Z6U1c1d2RYUldZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1RVlYUmhJRDBnY0hKbGRtbHZkWE5KYm5CMWRGWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Yms5bVpuTmxkRlJ2Y0NBOUlEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWc1pXTjBaV1JQY0hScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkhKdmNHUnZkMjQ3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGZGxKM0psSUdOMWNuSmxiblJzZVNCdmJpQmhiaUJ2Y0hScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1pXTjBaV1JKYm1SbGVDQStQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTJGMlpTQjBhR1VnWTNWeWNtVnVkQ0JnYVc1d2RYUmdJSFpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdGeklIZGxJRzFwWjJoMElHRnljbTkzSUdKaFkyc2dkRzhnYVhRZ2JHRjBaWEl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5WlhacGIzVnpTVzV3ZFhSV1lXeDFaU0E5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXdjbVYyYVc5MWMwbHVjSFYwVm1Gc2RXVWdQU0J3Y205d2N5NXBibkIxZEZaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJrUmhkR0VnUFNCd2NtOXdjeTV2Y0hScGIyNXpXM05sYkdWamRHVmtTVzVrWlhoZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUUxaGEyVWdjMlZzWldOMFpXUWdiM0IwYVc5dUlHRnNkMkY1Y3lCelkzSnZiR3dnZEc4Z2RtbHphV0pzWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnliM0JrYjNkdUlEMGdVbVZoWTNRdVptbHVaRVJQVFU1dlpHVW9YM1JvYVhNdWNtVm1jeTVrY205d1pHOTNiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaV04wWldSUGNIUnBiMjRnUFNCa2NtOXdaRzkzYmk1amFHbHNaSEpsYmx0elpXeGxZM1JsWkVsdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNIUnBiMjVQWm1aelpYUlViM0FnUFNCelpXeGxZM1JsWkU5d2RHbHZiaTV2Wm1aelpYUlViM0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9iM0IwYVc5dVQyWm1jMlYwVkc5d0lDc2djMlZzWldOMFpXUlBjSFJwYjI0dVkyeHBaVzUwU0dWcFoyaDBJRDRnWkhKdmNHUnZkMjR1WTJ4cFpXNTBTR1ZwWjJoMElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Yms5bVpuTmxkRlJ2Y0NBOElHUnliM0JrYjNkdUxuTmpjbTlzYkZSdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtjbTl3Wkc5M2JpNXpZM0p2Ykd4VWIzQWdQU0J2Y0hScGIyNVBabVp6WlhSVWIzQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdjeTV2Yms5d2RHbHZia05vWVc1blpTaGxkbVZ1ZEN3Z2IzQjBhVzl1UkdGMFlTd2djMlZzWldOMFpXUkpibVJsZUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdjeTV2Ymt0bGVVUnZkMjRvWlhabGJuUXNJRzl3ZEdsdmJrUmhkR0VzSUhObGJHVmpkR1ZrU1c1a1pYZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZvWVhOSVlXNWtiR1ZrUzJWNVJHOTNiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzVrWlhnZ1BTQjBhR2x6TG5OMFlYUmxMbk5sYkdWamRHVmtTVzVrWlhnN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0hScGIyNUVZWFJoSUQwZ2FXNWtaWGdnUENBd0lEOGdjSEp2Y0hNdWFXNXdkWFJXWVd4MVpTQTZJSEJ5YjNCekxtOXdkR2x2Ym5OYmFXNWtaWGhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0hNdWIyNUxaWGxFYjNkdUtHVjJaVzUwTENCdmNIUnBiMjVFWVhSaExDQnBibVJsZUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FHRnVaR3hsVDNCMGFXOXVRMnhwWTJzNklHWjFibU4wYVc5dUtITmxiR1ZqZEdWa1NXNWtaWGdzSUdWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmZkR2hwY3lBOUlIUm9hWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3Y3lBOUlGOTBhR2x6TG5CeWIzQnpPMXh1WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbVp2WTNWektDazdYRzRnSUNBZ0lDQWdJRjkwYUdsekxtaHBaR1ZJYVc1MEtDazdYRzRnSUNBZ0lDQWdJRjkwYUdsekxtaHBaR1ZFY205d1pHOTNiaWdwTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6WlhSVFpXeGxZM1JsWkVsdVpHVjRLSE5sYkdWamRHVmtTVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQndjbTl3Y3k1dmJrOXdkR2x2YmtOc2FXTnJLR1YyWlc1MExDQndjbTl3Y3k1dmNIUnBiMjV6VzNObGJHVmpkR1ZrU1c1a1pYaGRMQ0J6Wld4bFkzUmxaRWx1WkdWNEtUdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2FHRnVaR3hsVDNCMGFXOXVUVzkxYzJWUGRtVnlPaUJtZFc1amRHbHZiaWh6Wld4bFkzUmxaRWx1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TG5CeWIzQnpMbWh2ZG1WeVUyVnNaV04wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXpaWFJUWld4bFkzUmxaRWx1WkdWNEtITmxiR1ZqZEdWa1NXNWtaWGdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdoaGJtUnNaVTF2ZFhObFQzVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWDNSb2FYTXVjSEp2Y0hNdWFHOTJaWEpUWld4bFkzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5ObGRGTmxiR1ZqZEdWa1NXNWtaWGdvTFRFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHaGhibVJzWlZkcGJtUnZkME5zYjNObE9pQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNSb2FYTWdQU0IwYUdsekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBJRDBnWlhabGJuUXVkR0Z5WjJWME8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMFlYSm5aWFFnSVQwOUlIZHBibVJ2ZHlBbUppQWhkR2hwY3k1blpYUkVUMDFPYjJSbEtDa3VZMjl1ZEdGcGJuTW9kR0Z5WjJWMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11YUdsa1pVaHBiblFvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtaHBaR1ZFY205d1pHOTNiaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZTazdYRzRpWFgwPSIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL3R5cGVhaGVhZC5qc3gnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFJUTENoYXJhY3RlcnNSZWdFeHAgPSByZXF1aXJlKCcuL3J0bF9jaGFyc19yZWdleHAnKSxcbiAgICBOZXV0cmFsQ2hhcmFjdGVyc1JlZ0V4cCA9IHJlcXVpcmUoJy4vbmV1dHJhbF9jaGFyc19yZWdleHAnKSxcbiAgICBzdGFydHNXaXRoUlRMID0gbmV3IFJlZ0V4cCgnXig/OicgKyBOZXV0cmFsQ2hhcmFjdGVyc1JlZ0V4cCArICcpKig/OicgKyBSVExDaGFyYWN0ZXJzUmVnRXhwICsgJyknKSxcbiAgICBuZXV0cmFsVGV4dCA9IG5ldyBSZWdFeHAoJ14oPzonICsgTmV1dHJhbENoYXJhY3RlcnNSZWdFeHAgKyAnKSokJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGV4dCkge1xuICAgIHZhciBkaXIgPSAnbHRyJztcblxuICAgIGlmIChzdGFydHNXaXRoUlRMLnRlc3QodGV4dCkpIHtcbiAgICAgICAgZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIGlmIChuZXV0cmFsVGV4dC50ZXN0KHRleHQpKSB7XG4gICAgICAgIGRpciA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcjtcbn07XG4iLCIvLyBETyBOT1QgRURJVCFcbi8vIFRISVMgRklMRSBJUyBHRU5FUkFURUQhXG5cbi8vIEFsbCBiaWRpIGNoYXJhY3RlcnMgZXhjZXB0IHRob3NlIGZvdW5kIGluIGNsYXNzZXMgJ0wnIChMVFIpLCAnUicgKFJUTCksIGFuZCAnQUwnIChSVEwgQXJhYmljKSBhcyBwZXIgVW5pY29kZSA3LjAuMC5cblxuLy8ganNoaW50IGlnbm9yZTpzdGFydFxuLy8ganNjczpkaXNhYmxlIG1heGltdW1MaW5lTGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9ICdbXFwwLUBcXFstYFxcey1cXHhBOVxceEFCLVxceEI0XFx4QjYtXFx4QjlcXHhCQi1cXHhCRlxceEQ3XFx4RjdcXHUwMkI5XFx1MDJCQVxcdTAyQzItXFx1MDJDRlxcdTAyRDItXFx1MDJERlxcdTAyRTUtXFx1MDJFRFxcdTAyRUYtXFx1MDM2RlxcdTAzNzRcXHUwMzc1XFx1MDM3RVxcdTAzODRcXHUwMzg1XFx1MDM4N1xcdTAzRjZcXHUwNDgzLVxcdTA0ODlcXHUwNThBXFx1MDU4RC1cXHUwNThGXFx1MDU5MS1cXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDYwMC1cXHUwNjA3XFx1MDYwOVxcdTA2MEFcXHUwNjBDXFx1MDYwRS1cXHUwNjFBXFx1MDY0Qi1cXHUwNjZDXFx1MDY3MFxcdTA2RDYtXFx1MDZFNFxcdTA2RTctXFx1MDZFRFxcdTA2RjAtXFx1MDZGOVxcdTA3MTFcXHUwNzMwLVxcdTA3NEFcXHUwN0E2LVxcdTA3QjBcXHUwN0VCLVxcdTA3RjNcXHUwN0Y2LVxcdTA3RjlcXHUwODE2LVxcdTA4MTlcXHUwODFCLVxcdTA4MjNcXHUwODI1LVxcdTA4MjdcXHUwODI5LVxcdTA4MkRcXHUwODU5LVxcdTA4NUJcXHUwOEU0LVxcdTA5MDJcXHUwOTNBXFx1MDkzQ1xcdTA5NDEtXFx1MDk0OFxcdTA5NERcXHUwOTUxLVxcdTA5NTdcXHUwOTYyXFx1MDk2M1xcdTA5ODFcXHUwOUJDXFx1MDlDMS1cXHUwOUM0XFx1MDlDRFxcdTA5RTJcXHUwOUUzXFx1MDlGMlxcdTA5RjNcXHUwOUZCXFx1MEEwMVxcdTBBMDJcXHUwQTNDXFx1MEE0MVxcdTBBNDJcXHUwQTQ3XFx1MEE0OFxcdTBBNEItXFx1MEE0RFxcdTBBNTFcXHUwQTcwXFx1MEE3MVxcdTBBNzVcXHUwQTgxXFx1MEE4MlxcdTBBQkNcXHUwQUMxLVxcdTBBQzVcXHUwQUM3XFx1MEFDOFxcdTBBQ0RcXHUwQUUyXFx1MEFFM1xcdTBBRjFcXHUwQjAxXFx1MEIzQ1xcdTBCM0ZcXHUwQjQxLVxcdTBCNDRcXHUwQjREXFx1MEI1NlxcdTBCNjJcXHUwQjYzXFx1MEI4MlxcdTBCQzBcXHUwQkNEXFx1MEJGMy1cXHUwQkZBXFx1MEMwMFxcdTBDM0UtXFx1MEM0MFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM2MlxcdTBDNjNcXHUwQzc4LVxcdTBDN0VcXHUwQzgxXFx1MENCQ1xcdTBDQ0NcXHUwQ0NEXFx1MENFMlxcdTBDRTNcXHUwRDAxXFx1MEQ0MS1cXHUwRDQ0XFx1MEQ0RFxcdTBENjJcXHUwRDYzXFx1MERDQVxcdTBERDItXFx1MERENFxcdTBERDZcXHUwRTMxXFx1MEUzNC1cXHUwRTNBXFx1MEUzRlxcdTBFNDctXFx1MEU0RVxcdTBFQjFcXHUwRUI0LVxcdTBFQjlcXHUwRUJCXFx1MEVCQ1xcdTBFQzgtXFx1MEVDRFxcdTBGMThcXHUwRjE5XFx1MEYzNVxcdTBGMzdcXHUwRjM5LVxcdTBGM0RcXHUwRjcxLVxcdTBGN0VcXHUwRjgwLVxcdTBGODRcXHUwRjg2XFx1MEY4N1xcdTBGOEQtXFx1MEY5N1xcdTBGOTktXFx1MEZCQ1xcdTBGQzZcXHUxMDJELVxcdTEwMzBcXHUxMDMyLVxcdTEwMzdcXHUxMDM5XFx1MTAzQVxcdTEwM0RcXHUxMDNFXFx1MTA1OFxcdTEwNTlcXHUxMDVFLVxcdTEwNjBcXHUxMDcxLVxcdTEwNzRcXHUxMDgyXFx1MTA4NVxcdTEwODZcXHUxMDhEXFx1MTA5RFxcdTEzNUQtXFx1MTM1RlxcdTEzOTAtXFx1MTM5OVxcdTE0MDBcXHUxNjgwXFx1MTY5QlxcdTE2OUNcXHUxNzEyLVxcdTE3MTRcXHUxNzMyLVxcdTE3MzRcXHUxNzUyXFx1MTc1M1xcdTE3NzJcXHUxNzczXFx1MTdCNFxcdTE3QjVcXHUxN0I3LVxcdTE3QkRcXHUxN0M2XFx1MTdDOS1cXHUxN0QzXFx1MTdEQlxcdTE3RERcXHUxN0YwLVxcdTE3RjlcXHUxODAwLVxcdTE4MEVcXHUxOEE5XFx1MTkyMC1cXHUxOTIyXFx1MTkyN1xcdTE5MjhcXHUxOTMyXFx1MTkzOS1cXHUxOTNCXFx1MTk0MFxcdTE5NDRcXHUxOTQ1XFx1MTlERS1cXHUxOUZGXFx1MUExN1xcdTFBMThcXHUxQTFCXFx1MUE1NlxcdTFBNTgtXFx1MUE1RVxcdTFBNjBcXHUxQTYyXFx1MUE2NS1cXHUxQTZDXFx1MUE3My1cXHUxQTdDXFx1MUE3RlxcdTFBQjAtXFx1MUFCRVxcdTFCMDAtXFx1MUIwM1xcdTFCMzRcXHUxQjM2LVxcdTFCM0FcXHUxQjNDXFx1MUI0MlxcdTFCNkItXFx1MUI3M1xcdTFCODBcXHUxQjgxXFx1MUJBMi1cXHUxQkE1XFx1MUJBOFxcdTFCQTlcXHUxQkFCLVxcdTFCQURcXHUxQkU2XFx1MUJFOFxcdTFCRTlcXHUxQkVEXFx1MUJFRi1cXHUxQkYxXFx1MUMyQy1cXHUxQzMzXFx1MUMzNlxcdTFDMzdcXHUxQ0QwLVxcdTFDRDJcXHUxQ0Q0LVxcdTFDRTBcXHUxQ0UyLVxcdTFDRThcXHUxQ0VEXFx1MUNGNFxcdTFDRjhcXHUxQ0Y5XFx1MURDMC1cXHUxREY1XFx1MURGQy1cXHUxREZGXFx1MUZCRFxcdTFGQkYtXFx1MUZDMVxcdTFGQ0QtXFx1MUZDRlxcdTFGREQtXFx1MUZERlxcdTFGRUQtXFx1MUZFRlxcdTFGRkRcXHUxRkZFXFx1MjAwMC1cXHUyMDBEXFx1MjAxMC1cXHUyMDI5XFx1MjAyRi1cXHUyMDY0XFx1MjA2OFxcdTIwNkEtXFx1MjA3MFxcdTIwNzQtXFx1MjA3RVxcdTIwODAtXFx1MjA4RVxcdTIwQTAtXFx1MjBCRFxcdTIwRDAtXFx1MjBGMFxcdTIxMDBcXHUyMTAxXFx1MjEwMy1cXHUyMTA2XFx1MjEwOFxcdTIxMDlcXHUyMTE0XFx1MjExNi1cXHUyMTE4XFx1MjExRS1cXHUyMTIzXFx1MjEyNVxcdTIxMjdcXHUyMTI5XFx1MjEyRVxcdTIxM0FcXHUyMTNCXFx1MjE0MC1cXHUyMTQ0XFx1MjE0QS1cXHUyMTREXFx1MjE1MC1cXHUyMTVGXFx1MjE4OVxcdTIxOTAtXFx1MjMzNVxcdTIzN0ItXFx1MjM5NFxcdTIzOTYtXFx1MjNGQVxcdTI0MDAtXFx1MjQyNlxcdTI0NDAtXFx1MjQ0QVxcdTI0NjAtXFx1MjQ5QlxcdTI0RUEtXFx1MjZBQlxcdTI2QUQtXFx1MjdGRlxcdTI5MDAtXFx1MkI3M1xcdTJCNzYtXFx1MkI5NVxcdTJCOTgtXFx1MkJCOVxcdTJCQkQtXFx1MkJDOFxcdTJCQ0EtXFx1MkJEMVxcdTJDRTUtXFx1MkNFQVxcdTJDRUYtXFx1MkNGMVxcdTJDRjktXFx1MkNGRlxcdTJEN0ZcXHUyREUwLVxcdTJFNDJcXHUyRTgwLVxcdTJFOTlcXHUyRTlCLVxcdTJFRjNcXHUyRjAwLVxcdTJGRDVcXHUyRkYwLVxcdTJGRkJcXHUzMDAwLVxcdTMwMDRcXHUzMDA4LVxcdTMwMjBcXHUzMDJBLVxcdTMwMkRcXHUzMDMwXFx1MzAzNlxcdTMwMzdcXHUzMDNELVxcdTMwM0ZcXHUzMDk5LVxcdTMwOUNcXHUzMEEwXFx1MzBGQlxcdTMxQzAtXFx1MzFFM1xcdTMyMURcXHUzMjFFXFx1MzI1MC1cXHUzMjVGXFx1MzI3Qy1cXHUzMjdFXFx1MzJCMS1cXHUzMkJGXFx1MzJDQy1cXHUzMkNGXFx1MzM3Ny1cXHUzMzdBXFx1MzNERVxcdTMzREZcXHUzM0ZGXFx1NERDMC1cXHU0REZGXFx1QTQ5MC1cXHVBNEM2XFx1QTYwRC1cXHVBNjBGXFx1QTY2Ri1cXHVBNjdGXFx1QTY5RlxcdUE2RjBcXHVBNkYxXFx1QTcwMC1cXHVBNzIxXFx1QTc4OFxcdUE4MDJcXHVBODA2XFx1QTgwQlxcdUE4MjVcXHVBODI2XFx1QTgyOC1cXHVBODJCXFx1QTgzOFxcdUE4MzlcXHVBODc0LVxcdUE4NzdcXHVBOEM0XFx1QThFMC1cXHVBOEYxXFx1QTkyNi1cXHVBOTJEXFx1QTk0Ny1cXHVBOTUxXFx1QTk4MC1cXHVBOTgyXFx1QTlCM1xcdUE5QjYtXFx1QTlCOVxcdUE5QkNcXHVBOUU1XFx1QUEyOS1cXHVBQTJFXFx1QUEzMVxcdUFBMzJcXHVBQTM1XFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1QUE3Q1xcdUFBQjBcXHVBQUIyLVxcdUFBQjRcXHVBQUI3XFx1QUFCOFxcdUFBQkVcXHVBQUJGXFx1QUFDMVxcdUFBRUNcXHVBQUVEXFx1QUFGNlxcdUFCRTVcXHVBQkU4XFx1QUJFRFxcdUZCMUVcXHVGQjI5XFx1RkQzRVxcdUZEM0ZcXHVGREZEXFx1RkUwMC1cXHVGRTE5XFx1RkUyMC1cXHVGRTJEXFx1RkUzMC1cXHVGRTUyXFx1RkU1NC1cXHVGRTY2XFx1RkU2OC1cXHVGRTZCXFx1RkVGRlxcdUZGMDEtXFx1RkYyMFxcdUZGM0ItXFx1RkY0MFxcdUZGNUItXFx1RkY2NVxcdUZGRTAtXFx1RkZFNlxcdUZGRTgtXFx1RkZFRVxcdUZGRjktXFx1RkZGRF18XFx1RDgwMFtcXHVERDAxXFx1REQ0MC1cXHVERDhDXFx1REQ5MC1cXHVERDlCXFx1RERBMFxcdURERkRcXHVERUUwLVxcdURFRkJcXHVERjc2LVxcdURGN0FdfFxcdUQ4MDJbXFx1REQxRlxcdURFMDEtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTBGXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFRTVcXHVERUU2XFx1REYzOS1cXHVERjNGXXxcXHVEODAzW1xcdURFNjAtXFx1REU3RV18W1xcdUQ4MDRcXHVEQjQwXVtcXHVEQzAxXFx1REMzOC1cXHVEQzQ2XFx1REM1Mi1cXHVEQzY1XFx1REM3Ri1cXHVEQzgxXFx1RENCMy1cXHVEQ0I2XFx1RENCOVxcdURDQkFcXHVERDAwLVxcdUREMDJcXHVERDI3LVxcdUREMkJcXHVERDJELVxcdUREMzRcXHVERDczXFx1REQ4MFxcdUREODFcXHVEREI2LVxcdUREQkVcXHVERTJGLVxcdURFMzFcXHVERTM0XFx1REUzNlxcdURFMzdcXHVERURGXFx1REVFMy1cXHVERUVBXFx1REYwMVxcdURGM0NcXHVERjQwXFx1REY2Ni1cXHVERjZDXFx1REY3MC1cXHVERjc0XXxcXHVEODA1W1xcdURDQjMtXFx1RENCOFxcdURDQkFcXHVEQ0JGXFx1RENDMFxcdURDQzJcXHVEQ0MzXFx1RERCMi1cXHVEREI1XFx1RERCQ1xcdUREQkRcXHVEREJGXFx1RERDMFxcdURFMzMtXFx1REUzQVxcdURFM0RcXHVERTNGXFx1REU0MFxcdURFQUJcXHVERUFEXFx1REVCMC1cXHVERUI1XFx1REVCN118XFx1RDgxQVtcXHVERUYwLVxcdURFRjRcXHVERjMwLVxcdURGMzZdfFxcdUQ4MUJbXFx1REY4Ri1cXHVERjkyXXxcXHVEODJGW1xcdURDOURcXHVEQzlFXFx1RENBMC1cXHVEQ0EzXXxcXHVEODM0W1xcdURENjctXFx1REQ2OVxcdURENzMtXFx1REQ4MlxcdUREODUtXFx1REQ4QlxcdUREQUEtXFx1RERBRFxcdURFMDAtXFx1REU0NVxcdURGMDAtXFx1REY1Nl18XFx1RDgzNVtcXHVERURCXFx1REYxNVxcdURGNEZcXHVERjg5XFx1REZDM1xcdURGQ0UtXFx1REZGRl18XFx1RDgzQVtcXHVEQ0QwLVxcdURDRDZdfFxcdUQ4M0JbXFx1REVGMFxcdURFRjFdfFxcdUQ4M0NbXFx1REMwMC1cXHVEQzJCXFx1REMzMC1cXHVEQzkzXFx1RENBMC1cXHVEQ0FFXFx1RENCMS1cXHVEQ0JGXFx1RENDMS1cXHVEQ0NGXFx1RENEMS1cXHVEQ0Y1XFx1REQwMC1cXHVERDBDXFx1REQ2QVxcdURENkJcXHVERjAwLVxcdURGMkNcXHVERjMwLVxcdURGN0RcXHVERjgwLVxcdURGQ0VcXHVERkQ0LVxcdURGRjddfFxcdUQ4M0RbXFx1REMwMC1cXHVEQ0ZFXFx1REQwMC1cXHVERDRBXFx1REQ1MC1cXHVERDc5XFx1REQ3Qi1cXHVEREEzXFx1RERBNS1cXHVERTQyXFx1REU0NS1cXHVERUNGXFx1REVFMC1cXHVERUVDXFx1REVGMC1cXHVERUYzXFx1REYwMC1cXHVERjczXFx1REY4MC1cXHVERkQ0XXxcXHVEODNFW1xcdURDMDAtXFx1REMwQlxcdURDMTAtXFx1REM0N1xcdURDNTAtXFx1REM1OVxcdURDNjAtXFx1REM4N1xcdURDOTAtXFx1RENBRF0nO1xuLy8ganNjczplbmFibGUgbWF4aW11bUxpbmVMZW5ndGhcbi8vIGpzaGludCBpZ25vcmU6ZW5kXG4iLCIvLyBETyBOT1QgRURJVCFcbi8vIFRISVMgRklMRSBJUyBHRU5FUkFURUQhXG5cbi8vIEFsbCBiaWRpIGNoYXJhY3RlcnMgZm91bmQgaW4gY2xhc3NlcyAnUicsICdBTCcsICdSTEUnLCAnUkxPJywgYW5kICdSTEknIGFzIHBlciBVbmljb2RlIDcuMC4wLlxuXG4vLyBqc2hpbnQgaWdub3JlOnN0YXJ0XG4vLyBqc2NzOmRpc2FibGUgbWF4aW11bUxpbmVMZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gJ1tcXHUwNUJFXFx1MDVDMFxcdTA1QzNcXHUwNUM2XFx1MDVEMC1cXHUwNUVBXFx1MDVGMC1cXHUwNUY0XFx1MDYwOFxcdTA2MEJcXHUwNjBEXFx1MDYxQlxcdTA2MUNcXHUwNjFFLVxcdTA2NEFcXHUwNjZELVxcdTA2NkZcXHUwNjcxLVxcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNzBEXFx1MDcwRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDMC1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDgzMC1cXHUwODNFXFx1MDg0MC1cXHUwODU4XFx1MDg1RVxcdTA4QTAtXFx1MDhCMlxcdTIwMEZcXHUyMDJCXFx1MjAyRVxcdTIwNjdcXHVGQjFEXFx1RkIxRi1cXHVGQjI4XFx1RkIyQS1cXHVGQjM2XFx1RkIzOC1cXHVGQjNDXFx1RkIzRVxcdUZCNDBcXHVGQjQxXFx1RkI0M1xcdUZCNDRcXHVGQjQ2LVxcdUZCQzFcXHVGQkQzLVxcdUZEM0RcXHVGRDUwLVxcdUZEOEZcXHVGRDkyLVxcdUZEQzdcXHVGREYwLVxcdUZERkNcXHVGRTcwLVxcdUZFNzRcXHVGRTc2LVxcdUZFRkNdfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNTctXFx1REM5RVxcdURDQTctXFx1RENBRlxcdUREMDAtXFx1REQxQlxcdUREMjAtXFx1REQzOVxcdUREM0ZcXHVERDgwLVxcdUREQjdcXHVEREJFXFx1RERCRlxcdURFMDBcXHVERTEwLVxcdURFMTNcXHVERTE1LVxcdURFMTdcXHVERTE5LVxcdURFMzNcXHVERTQwLVxcdURFNDdcXHVERTUwLVxcdURFNThcXHVERTYwLVxcdURFOUZcXHVERUMwLVxcdURFRTRcXHVERUVCLVxcdURFRjZcXHVERjAwLVxcdURGMzVcXHVERjQwLVxcdURGNTVcXHVERjU4LVxcdURGNzJcXHVERjc4LVxcdURGOTFcXHVERjk5LVxcdURGOUNcXHVERkE5LVxcdURGQUZdfFxcdUQ4MDNbXFx1REMwMC1cXHVEQzQ4XXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdURDQzctXFx1RENDRl18XFx1RDgzQltcXHVERTAwLVxcdURFMDNcXHVERTA1LVxcdURFMUZcXHVERTIxXFx1REUyMlxcdURFMjRcXHVERTI3XFx1REUyOS1cXHVERTMyXFx1REUzNC1cXHVERTM3XFx1REUzOVxcdURFM0JcXHVERTQyXFx1REU0N1xcdURFNDlcXHVERTRCXFx1REU0RC1cXHVERTRGXFx1REU1MVxcdURFNTJcXHVERTU0XFx1REU1N1xcdURFNTlcXHVERTVCXFx1REU1RFxcdURFNUZcXHVERTYxXFx1REU2MlxcdURFNjRcXHVERTY3LVxcdURFNkFcXHVERTZDLVxcdURFNzJcXHVERTc0LVxcdURFNzdcXHVERTc5LVxcdURFN0NcXHVERTdFXFx1REU4MC1cXHVERTg5XFx1REU4Qi1cXHVERTlCXFx1REVBMS1cXHVERUEzXFx1REVBNS1cXHVERUE5XFx1REVBQi1cXHVERUJCXSc7XG4vLyBqc2NzOmVuYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8ganNoaW50IGlnbm9yZTplbmRcbiJdfQ==
